{"ast":null,"code":"import React,{useState}from'react';import api from'../services/api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ResumeUpload=_ref=>{let{socket,sendMessage,isConnected}=_ref;const[files,setFiles]=useState(null);const[uploading,setUploading]=useState(false);const[message,setMessage]=useState('');const[results,setResults]=useState(null);const[jobId,setJobId]=useState('');const[dragOver,setDragOver]=useState(false);const handleFileChange=e=>{setFiles(e.target.files);setResults(null);setMessage('');};const handleDragOver=e=>{e.preventDefault();setDragOver(true);};const handleDragLeave=e=>{e.preventDefault();setDragOver(false);};const handleDrop=e=>{e.preventDefault();setDragOver(false);const droppedFiles=e.dataTransfer.files;if(droppedFiles.length>0){setFiles(droppedFiles);setResults(null);setMessage('');}};const validateFiles=fileList=>{const errors=[];const allowedTypes=['.pdf','.doc','.docx','.txt'];const maxSize=10*1024*1024;// 10MB\nArray.from(fileList).forEach((file,index)=>{var _file$name$split$pop;const fileExtension='.'+((_file$name$split$pop=file.name.split('.').pop())===null||_file$name$split$pop===void 0?void 0:_file$name$split$pop.toLowerCase());if(!allowedTypes.includes(fileExtension)){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.\"));}if(file.size>maxSize){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): File too large. Maximum size is 10MB.\"));}if(file.size===0){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): File is empty.\"));}});return errors;};const handleUpload=async()=>{if(!files||files.length===0){setMessage('Please select files to upload');return;}// Validate files\nconst validationErrors=validateFiles(files);if(validationErrors.length>0){setMessage(\"Validation errors:\\n\".concat(validationErrors.join('\\n')));return;}setUploading(true);setMessage('');setResults(null);try{console.log(\"\\uD83D\\uDCE4 Starting upload of \".concat(files.length,\" files\"));// Create FormData for file upload\nconst formData=new FormData();Array.from(files).forEach(file=>{formData.append('files',file);});// Add job ID if provided\nif(jobId.trim()){formData.append('job_id',jobId.trim());}// Send WebSocket message about upload start\nif(isConnected&&sendMessage){sendMessage(\"Starting AI analysis of \".concat(files.length,\" resume(s)\").concat(jobId?\" for job \".concat(jobId):''));}console.log('📡 Sending files to backend...');// Upload and process files\nconst response=await api.post('/api/v1/resumes/upload',formData,{headers:{'Content-Type':'multipart/form-data'},timeout:120000// 2 minutes timeout for large files\n});console.log('✅ Upload response:',response.data);if(response.data.success){const uploadResults={totalUploaded:response.data.total_uploaded,totalProcessed:response.data.total_processed,failedCount:response.data.failed_count,processedResumes:response.data.processed_resumes||[],failedResumes:response.data.failed_resumes||[],matchingResults:response.data.matching_results};setResults(uploadResults);// Success message\nlet successMsg=\"Successfully processed \".concat(uploadResults.totalProcessed,\" out of \").concat(uploadResults.totalUploaded,\" resume(s)\");if(uploadResults.failedCount>0){successMsg+=\". \".concat(uploadResults.failedCount,\" file(s) failed to process.\");}setMessage(successMsg);// Send WebSocket message about completion\nif(isConnected&&sendMessage){sendMessage(\"AI analysis complete: \".concat(uploadResults.totalProcessed,\" resumes processed successfully\").concat(uploadResults.matchingResults?\" with job matching results\":''));}// Clear files after successful upload\nsetFiles(null);}else{throw new Error(response.data.error||'Upload failed');}}catch(error){var _error$response,_error$response$data;console.error('❌ Upload failed:',error);let errorMessage='Upload failed: ';if((_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.detail){errorMessage+=error.response.data.detail;}else if(error.message){errorMessage+=error.message;}else{errorMessage+='Unknown error occurred';}setMessage(errorMessage);// Send WebSocket message about failure\nif(isConnected&&sendMessage){sendMessage(\"Resume upload failed: \".concat(errorMessage));}}finally{setUploading(false);}};const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};const getScoreColor=score=>{if(score>=80)return'#10b981';// Green\nif(score>=60)return'#f59e0b';// Yellow\nif(score>=40)return'#ef4444';// Red\nreturn'#6b7280';// Gray\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"resume-upload\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"page-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDCC4 Resume Upload & AI Analysis\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Upload resumes for intelligent parsing, scoring, and candidate matching\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"job-selection\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"jobId\",children:\"Job ID (Optional):\"}),/*#__PURE__*/_jsx(\"input\",{id:\"jobId\",type:\"text\",placeholder:\"Enter Job ID for candidate matching\",value:jobId,onChange:e=>setJobId(e.target.value),disabled:uploading}),/*#__PURE__*/_jsx(\"small\",{children:\"If provided, candidates will be automatically matched to this job\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-area \".concat(dragOver?'drag-over':''),onDragOver:handleDragOver,onDragLeave:handleDragLeave,onDrop:handleDrop,children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83D\\uDCC4\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Drag & Drop Resumes Here\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Or click to select files (PDF, DOC, DOCX, TXT)\"}),/*#__PURE__*/_jsx(\"p\",{className:\"file-limits\",children:\"Maximum 10MB per file \\u2022 Up to 20 files at once\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",multiple:true,accept:\".pdf,.doc,.docx,.txt\",onChange:handleFileChange,disabled:uploading,className:\"file-input\"})]}),files&&files.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"selected-files\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"\\uD83D\\uDCCB Selected Files (\",files.length,\"):\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"files-list\",children:Array.from(files).map((file,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"file-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:file.name}),/*#__PURE__*/_jsx(\"span\",{className:\"file-size\",children:formatFileSize(file.size)}),/*#__PURE__*/_jsx(\"span\",{className:\"file-type\",children:file.type||'Unknown'})]},index))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"upload-actions\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn-primary upload-btn\",onClick:handleUpload,disabled:uploading||!files||files.length===0,children:uploading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner\"}),\"Processing \",(files===null||files===void 0?void 0:files.length)||0,\" file(s)...\"]}):/*#__PURE__*/_jsx(_Fragment,{children:\"\\uD83D\\uDE80 Upload & Analyze with AI\"})})}),message&&/*#__PURE__*/_jsx(\"div\",{className:\"alert \".concat(message.includes('Success')||message.includes('processed')?'alert-success':'alert-error'),children:/*#__PURE__*/_jsx(\"pre\",{children:message})}),results&&/*#__PURE__*/_jsxs(\"div\",{className:\"processing-results\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCCA Processing Results\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Total Uploaded\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number\",children:results.totalUploaded})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Successfully Processed\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number success\",children:results.totalProcessed})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Failed\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number error\",children:results.failedCount})]})]}),results.processedResumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"processed-resumes\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u2705 Successfully Processed Candidates\"}),/*#__PURE__*/_jsx(\"div\",{className:\"candidates-grid\",children:results.processedResumes.map((resume,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-header\",children:[/*#__PURE__*/_jsx(\"h5\",{children:resume.candidate_name}),/*#__PURE__*/_jsxs(\"span\",{className:\"score-badge\",style:{backgroundColor:getScoreColor(resume.score)},children:[resume.score.toFixed(1),\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-details\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Email:\"}),\" \",resume.email||'Not provided']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Skills:\"}),\" \",resume.skills_count,\" identified\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Experience:\"}),\" \",resume.experience_years,\" years\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"File:\"}),\" \",resume.filename]})]})]},index))})]}),results.failedResumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"failed-resumes\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u274C Failed to Process\"}),/*#__PURE__*/_jsx(\"div\",{className:\"failed-list\",children:results.failedResumes.map((failed,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"failed-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"failed-filename\",children:failed.filename}),/*#__PURE__*/_jsx(\"span\",{className:\"failed-error\",children:failed.error})]},index))})]}),results.matchingResults&&/*#__PURE__*/_jsxs(\"div\",{className:\"matching-results\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\uD83C\\uDFAF Job Matching Results\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Candidates have been matched to Job ID: \",jobId]})]})]})]});};export default ResumeUpload;","map":{"version":3,"names":["React","useState","api","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ResumeUpload","_ref","socket","sendMessage","isConnected","files","setFiles","uploading","setUploading","message","setMessage","results","setResults","jobId","setJobId","dragOver","setDragOver","handleFileChange","e","target","handleDragOver","preventDefault","handleDragLeave","handleDrop","droppedFiles","dataTransfer","length","validateFiles","fileList","errors","allowedTypes","maxSize","Array","from","forEach","file","index","_file$name$split$pop","fileExtension","name","split","pop","toLowerCase","includes","push","concat","size","handleUpload","validationErrors","join","console","log","formData","FormData","append","trim","response","post","headers","timeout","data","success","uploadResults","totalUploaded","total_uploaded","totalProcessed","total_processed","failedCount","failed_count","processedResumes","processed_resumes","failedResumes","failed_resumes","matchingResults","matching_results","successMsg","Error","error","_error$response","_error$response$data","errorMessage","detail","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","getScoreColor","score","className","children","htmlFor","id","type","placeholder","value","onChange","disabled","onDragOver","onDragLeave","onDrop","multiple","accept","map","onClick","resume","candidate_name","style","backgroundColor","email","skills_count","experience_years","filename","failed"],"sources":["D:/Navikenz/pro/navihire/frontend/src/components/ResumeUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport api from '../services/api';\r\n\r\ninterface ResumeUploadProps {\r\n  socket: WebSocket | null;\r\n  sendMessage: (message: string) => void;\r\n  isConnected: boolean;\r\n}\r\n\r\ninterface ProcessedResume {\r\n  candidate_id: number;\r\n  filename: string;\r\n  candidate_name: string;\r\n  email: string;\r\n  status: string;\r\n  score: number;\r\n  skills_count: number;\r\n  experience_years: number;\r\n}\r\n\r\ninterface FailedResume {\r\n  filename: string;\r\n  error: string;\r\n  error_type: string;\r\n}\r\n\r\ninterface UploadResults {\r\n  totalUploaded: number;\r\n  totalProcessed: number;\r\n  failedCount: number;\r\n  processedResumes: ProcessedResume[];\r\n  failedResumes: FailedResume[];\r\n  matchingResults?: any;\r\n}\r\n\r\nconst ResumeUpload: React.FC<ResumeUploadProps> = ({ socket, sendMessage, isConnected }) => {\r\n  const [files, setFiles] = useState<FileList | null>(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [results, setResults] = useState<UploadResults | null>(null);\r\n  const [jobId, setJobId] = useState<string>('');\r\n  const [dragOver, setDragOver] = useState(false);\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFiles(e.target.files);\r\n    setResults(null);\r\n    setMessage('');\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n    \r\n    const droppedFiles = e.dataTransfer.files;\r\n    if (droppedFiles.length > 0) {\r\n      setFiles(droppedFiles);\r\n      setResults(null);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const validateFiles = (fileList: FileList): string[] => {\r\n    const errors: string[] = [];\r\n    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n\r\n    Array.from(fileList).forEach((file, index) => {\r\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n      \r\n      if (!allowedTypes.includes(fileExtension)) {\r\n        errors.push(`File ${index + 1} (${file.name}): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.`);\r\n      }\r\n      \r\n      if (file.size > maxSize) {\r\n        errors.push(`File ${index + 1} (${file.name}): File too large. Maximum size is 10MB.`);\r\n      }\r\n      \r\n      if (file.size === 0) {\r\n        errors.push(`File ${index + 1} (${file.name}): File is empty.`);\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!files || files.length === 0) {\r\n      setMessage('Please select files to upload');\r\n      return;\r\n    }\r\n\r\n    // Validate files\r\n    const validationErrors = validateFiles(files);\r\n    if (validationErrors.length > 0) {\r\n      setMessage(`Validation errors:\\n${validationErrors.join('\\n')}`);\r\n      return;\r\n    }\r\n\r\n    setUploading(true);\r\n    setMessage('');\r\n    setResults(null);\r\n\r\n    try {\r\n      console.log(`📤 Starting upload of ${files.length} files`);\r\n      \r\n      // Create FormData for file upload\r\n      const formData = new FormData();\r\n      Array.from(files).forEach(file => {\r\n        formData.append('files', file);\r\n      });\r\n      \r\n      // Add job ID if provided\r\n      if (jobId.trim()) {\r\n        formData.append('job_id', jobId.trim());\r\n      }\r\n\r\n      // Send WebSocket message about upload start\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Starting AI analysis of ${files.length} resume(s)${jobId ? ` for job ${jobId}` : ''}`);\r\n      }\r\n\r\n      console.log('📡 Sending files to backend...');\r\n      \r\n      // Upload and process files\r\n      const response = await api.post('/api/v1/resumes/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        timeout: 120000 // 2 minutes timeout for large files\r\n      });\r\n\r\n      console.log('✅ Upload response:', response.data);\r\n\r\n      if (response.data.success) {\r\n        const uploadResults: UploadResults = {\r\n          totalUploaded: response.data.total_uploaded,\r\n          totalProcessed: response.data.total_processed,\r\n          failedCount: response.data.failed_count,\r\n          processedResumes: response.data.processed_resumes || [],\r\n          failedResumes: response.data.failed_resumes || [],\r\n          matchingResults: response.data.matching_results\r\n        };\r\n\r\n        setResults(uploadResults);\r\n        \r\n        // Success message\r\n        let successMsg = `Successfully processed ${uploadResults.totalProcessed} out of ${uploadResults.totalUploaded} resume(s)`;\r\n        if (uploadResults.failedCount > 0) {\r\n          successMsg += `. ${uploadResults.failedCount} file(s) failed to process.`;\r\n        }\r\n        setMessage(successMsg);\r\n\r\n        // Send WebSocket message about completion\r\n        if (isConnected && sendMessage) {\r\n          sendMessage(`AI analysis complete: ${uploadResults.totalProcessed} resumes processed successfully${uploadResults.matchingResults ? ` with job matching results` : ''}`);\r\n        }\r\n\r\n        // Clear files after successful upload\r\n        setFiles(null);\r\n        \r\n      } else {\r\n        throw new Error(response.data.error || 'Upload failed');\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Upload failed:', error);\r\n      \r\n      let errorMessage = 'Upload failed: ';\r\n      if (error.response?.data?.detail) {\r\n        errorMessage += error.response.data.detail;\r\n      } else if (error.message) {\r\n        errorMessage += error.message;\r\n      } else {\r\n        errorMessage += 'Unknown error occurred';\r\n      }\r\n      \r\n      setMessage(errorMessage);\r\n\r\n      // Send WebSocket message about failure\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Resume upload failed: ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number): string => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 80) return '#10b981'; // Green\r\n    if (score >= 60) return '#f59e0b'; // Yellow\r\n    if (score >= 40) return '#ef4444'; // Red\r\n    return '#6b7280'; // Gray\r\n  };\r\n\r\n  return (\r\n    <div className=\"resume-upload\">\r\n      <div className=\"page-header\">\r\n        <h2>📄 Resume Upload & AI Analysis</h2>\r\n        <p>Upload resumes for intelligent parsing, scoring, and candidate matching</p>\r\n      </div>\r\n\r\n      {/* Job ID Input */}\r\n      <div className=\"job-selection\">\r\n        <label htmlFor=\"jobId\">Job ID (Optional):</label>\r\n        <input\r\n          id=\"jobId\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Job ID for candidate matching\"\r\n          value={jobId}\r\n          onChange={(e) => setJobId(e.target.value)}\r\n          disabled={uploading}\r\n        />\r\n        <small>If provided, candidates will be automatically matched to this job</small>\r\n      </div>\r\n\r\n      {/* Upload Area */}\r\n      <div \r\n        className={`upload-area ${dragOver ? 'drag-over' : ''}`}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"upload-icon\">📄</div>\r\n        <h3>Drag & Drop Resumes Here</h3>\r\n        <p>Or click to select files (PDF, DOC, DOCX, TXT)</p>\r\n        <p className=\"file-limits\">Maximum 10MB per file • Up to 20 files at once</p>\r\n        <input \r\n          type=\"file\" \r\n          multiple \r\n          accept=\".pdf,.doc,.docx,.txt\"\r\n          onChange={handleFileChange}\r\n          disabled={uploading}\r\n          className=\"file-input\"\r\n        />\r\n      </div>\r\n\r\n      {/* Selected Files Display */}\r\n      {files && files.length > 0 && (\r\n        <div className=\"selected-files\">\r\n          <h4>📋 Selected Files ({files.length}):</h4>\r\n          <div className=\"files-list\">\r\n            {Array.from(files).map((file, index) => (\r\n              <div key={index} className=\"file-item\">\r\n                <span className=\"file-name\">{file.name}</span>\r\n                <span className=\"file-size\">{formatFileSize(file.size)}</span>\r\n                <span className=\"file-type\">{file.type || 'Unknown'}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Upload Button */}\r\n      <div className=\"upload-actions\">\r\n        <button \r\n          className=\"btn-primary upload-btn\" \r\n          onClick={handleUpload}\r\n          disabled={uploading || !files || files.length === 0}\r\n        >\r\n          {uploading ? (\r\n            <>\r\n              <span className=\"spinner\"></span>\r\n              Processing {files?.length || 0} file(s)...\r\n            </>\r\n          ) : (\r\n            <>\r\n              🚀 Upload & Analyze with AI\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status Message */}\r\n      {message && (\r\n        <div className={`alert ${message.includes('Success') || message.includes('processed') ? 'alert-success' : 'alert-error'}`}>\r\n          <pre>{message}</pre>\r\n        </div>\r\n      )}\r\n\r\n      {/* Processing Results */}\r\n      {results && (\r\n        <div className=\"processing-results\">\r\n          <h3>📊 Processing Results</h3>\r\n          \r\n          {/* Summary Stats */}\r\n          <div className=\"results-summary\">\r\n            <div className=\"stat-card\">\r\n              <h4>Total Uploaded</h4>\r\n              <span className=\"stat-number\">{results.totalUploaded}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Successfully Processed</h4>\r\n              <span className=\"stat-number success\">{results.totalProcessed}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Failed</h4>\r\n              <span className=\"stat-number error\">{results.failedCount}</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Processed Resumes */}\r\n          {results.processedResumes.length > 0 && (\r\n            <div className=\"processed-resumes\">\r\n              <h4>✅ Successfully Processed Candidates</h4>\r\n              <div className=\"candidates-grid\">\r\n                {results.processedResumes.map((resume, index) => (\r\n                  <div key={index} className=\"candidate-card\">\r\n                    <div className=\"candidate-header\">\r\n                      <h5>{resume.candidate_name}</h5>\r\n                      <span \r\n                        className=\"score-badge\"\r\n                        style={{ backgroundColor: getScoreColor(resume.score) }}\r\n                      >\r\n                        {resume.score.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"candidate-details\">\r\n                      <p><strong>Email:</strong> {resume.email || 'Not provided'}</p>\r\n                      <p><strong>Skills:</strong> {resume.skills_count} identified</p>\r\n                      <p><strong>Experience:</strong> {resume.experience_years} years</p>\r\n                      <p><strong>File:</strong> {resume.filename}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Failed Resumes */}\r\n          {results.failedResumes.length > 0 && (\r\n            <div className=\"failed-resumes\">\r\n              <h4>❌ Failed to Process</h4>\r\n              <div className=\"failed-list\">\r\n                {results.failedResumes.map((failed, index) => (\r\n                  <div key={index} className=\"failed-item\">\r\n                    <span className=\"failed-filename\">{failed.filename}</span>\r\n                    <span className=\"failed-error\">{failed.error}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Matching Results */}\r\n          {results.matchingResults && (\r\n            <div className=\"matching-results\">\r\n              <h4>🎯 Job Matching Results</h4>\r\n              <p>Candidates have been matched to Job ID: {jobId}</p>\r\n              {/* Add more matching details here if needed */}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResumeUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}