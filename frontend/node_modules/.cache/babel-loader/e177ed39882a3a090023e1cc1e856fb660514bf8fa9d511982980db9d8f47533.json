{"ast":null,"code":"import React,{useState,useRef}from'react';import api from'../services/api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ResumeUpload=_ref=>{let{socket,sendMessage,isConnected}=_ref;const[files,setFiles]=useState([]);const[uploading,setUploading]=useState(false);const[message,setMessage]=useState('');const[results,setResults]=useState(null);const[jobId,setJobId]=useState('');const[dragOver,setDragOver]=useState(false);const fileInputRef=useRef(null);const generateFileId=()=>\"file_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));const handleFileChange=e=>{const selectedFiles=e.target.files;if(selectedFiles){addFiles(Array.from(selectedFiles));}};const addFiles=newFiles=>{const filesWithId=newFiles.map(file=>({file,id:generateFileId(),preview:file.type.startsWith('image/')?URL.createObjectURL(file):undefined}));setFiles(prev=>[...prev,...filesWithId]);setResults(null);setMessage('');// Reset file input to allow selecting the same file again\nif(fileInputRef.current){fileInputRef.current.value='';}};const removeFile=fileId=>{setFiles(prev=>{const updatedFiles=prev.filter(f=>f.id!==fileId);// Clean up object URLs to prevent memory leaks\nconst removedFile=prev.find(f=>f.id===fileId);if(removedFile!==null&&removedFile!==void 0&&removedFile.preview){URL.revokeObjectURL(removedFile.preview);}return updatedFiles;});// Clear results if no files remain\nif(files.length===1){setResults(null);setMessage('');}};const removeAllFiles=()=>{// Clean up all object URLs\nfiles.forEach(fileWithId=>{if(fileWithId.preview){URL.revokeObjectURL(fileWithId.preview);}});setFiles([]);setResults(null);setMessage('');// Reset file input\nif(fileInputRef.current){fileInputRef.current.value='';}};const handleDragOver=e=>{e.preventDefault();setDragOver(true);};const handleDragLeave=e=>{e.preventDefault();setDragOver(false);};const handleDrop=e=>{e.preventDefault();setDragOver(false);const droppedFiles=Array.from(e.dataTransfer.files);if(droppedFiles.length>0){addFiles(droppedFiles);}};const validateFiles=filesToValidate=>{const errors=[];const allowedTypes=['.pdf','.doc','.docx','.txt'];const maxSize=10*1024*1024;// 10MB\nfilesToValidate.forEach((fileWithId,index)=>{var _file$name$split$pop;const file=fileWithId.file;const fileExtension='.'+((_file$name$split$pop=file.name.split('.').pop())===null||_file$name$split$pop===void 0?void 0:_file$name$split$pop.toLowerCase());if(!allowedTypes.includes(fileExtension)){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.\"));}if(file.size>maxSize){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): File too large. Maximum size is 10MB.\"));}if(file.size===0){errors.push(\"File \".concat(index+1,\" (\").concat(file.name,\"): File is empty.\"));}});return errors;};const handleUpload=async()=>{if(!files||files.length===0){setMessage('Please select files to upload');return;}// Validate files\nconst validationErrors=validateFiles(files);if(validationErrors.length>0){setMessage(\"Validation errors:\\n\".concat(validationErrors.join('\\n')));return;}setUploading(true);setMessage('');setResults(null);try{console.log(\"\\uD83D\\uDCE4 Starting upload of \".concat(files.length,\" files\"));// Create FormData for file upload\nconst formData=new FormData();files.forEach(fileWithId=>{formData.append('files',fileWithId.file);});// Add job ID if provided\nif(jobId.trim()){formData.append('job_id',jobId.trim());}// Send WebSocket message about upload start\nif(isConnected&&sendMessage){sendMessage(\"Starting AI analysis of \".concat(files.length,\" resume(s)\").concat(jobId?\" for job \".concat(jobId):''));}console.log('📡 Sending files to backend...');// Upload and process files\nconst response=await api.post('/api/v1/resumes/upload',formData,{headers:{'Content-Type':'multipart/form-data'},timeout:120000// 2 minutes timeout for large files\n});console.log('✅ Upload response:',response.data);if(response.data.success){const uploadResults={totalUploaded:response.data.total_uploaded,totalProcessed:response.data.total_processed,failedCount:response.data.failed_count,processedResumes:response.data.processed_resumes||[],failedResumes:response.data.failed_resumes||[],matchingResults:response.data.matching_results};setResults(uploadResults);// Success message\nlet successMsg=\"Successfully processed \".concat(uploadResults.totalProcessed,\" out of \").concat(uploadResults.totalUploaded,\" resume(s)\");if(uploadResults.failedCount>0){successMsg+=\". \".concat(uploadResults.failedCount,\" file(s) failed to process.\");}setMessage(successMsg);// Send WebSocket message about completion\nif(isConnected&&sendMessage){sendMessage(\"AI analysis complete: \".concat(uploadResults.totalProcessed,\" resumes processed successfully\").concat(uploadResults.matchingResults?\" with job matching results\":''));}// Clear files after successful upload\nremoveAllFiles();}else{throw new Error(response.data.error||'Upload failed');}}catch(error){var _error$response,_error$response$data;console.error('❌ Upload failed:',error);let errorMessage='Upload failed: ';if((_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.detail){errorMessage+=error.response.data.detail;}else if(error.message){errorMessage+=error.message;}else{errorMessage+='Unknown error occurred';}setMessage(errorMessage);// Send WebSocket message about failure\nif(isConnected&&sendMessage){sendMessage(\"Resume upload failed: \".concat(errorMessage));}}finally{setUploading(false);}};const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};const getScoreColor=score=>{if(score>=80)return'#10b981';// Green\nif(score>=60)return'#f59e0b';// Yellow\nif(score>=40)return'#ef4444';// Red\nreturn'#6b7280';// Gray\n};const getFileIcon=fileName=>{var _fileName$split$pop;const extension=(_fileName$split$pop=fileName.split('.').pop())===null||_fileName$split$pop===void 0?void 0:_fileName$split$pop.toLowerCase();switch(extension){case'pdf':return'📄';case'doc':case'docx':return'📝';case'txt':return'📃';default:return'📄';}};return/*#__PURE__*/_jsxs(\"div\",{className:\"resume-upload\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"page-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDCC4 Resume Upload & AI Analysis\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Upload resumes for intelligent parsing, scoring, and candidate matching\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"job-selection\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"jobId\",children:\"Job ID (Optional):\"}),/*#__PURE__*/_jsx(\"input\",{id:\"jobId\",type:\"text\",placeholder:\"Enter Job ID for candidate matching\",value:jobId,onChange:e=>setJobId(e.target.value),disabled:uploading}),/*#__PURE__*/_jsx(\"small\",{children:\"If provided, candidates will be automatically matched to this job\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-area \".concat(dragOver?'drag-over':''),onDragOver:handleDragOver,onDragLeave:handleDragLeave,onDrop:handleDrop,onClick:()=>{var _fileInputRef$current;return(_fileInputRef$current=fileInputRef.current)===null||_fileInputRef$current===void 0?void 0:_fileInputRef$current.click();},children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83D\\uDCC4\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Drag & Drop Resumes Here\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Or click to select files (PDF, DOC, DOCX, TXT)\"}),/*#__PURE__*/_jsx(\"p\",{className:\"file-limits\",children:\"Maximum 10MB per file \\u2022 Up to 20 files at once\"}),/*#__PURE__*/_jsx(\"input\",{ref:fileInputRef,type:\"file\",multiple:true,accept:\".pdf,.doc,.docx,.txt\",onChange:handleFileChange,disabled:uploading,style:{display:'none'}})]}),files.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"selected-files\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"files-header\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"\\uD83D\\uDCCB Selected Files (\",files.length,\")\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn-remove-all\",onClick:removeAllFiles,disabled:uploading,title:\"Remove all files\",children:\"\\uD83D\\uDDD1\\uFE0F Remove All\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"files-list\",children:files.map(fileWithId=>/*#__PURE__*/_jsxs(\"div\",{className:\"file-item\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"file-icon\",children:getFileIcon(fileWithId.file.name)}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-details\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:fileWithId.file.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-meta\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-size\",children:formatFileSize(fileWithId.file.size)}),/*#__PURE__*/_jsx(\"span\",{className:\"file-type\",children:fileWithId.file.type||'Unknown'})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn-remove-file\",onClick:()=>removeFile(fileWithId.id),disabled:uploading,title:\"Remove \".concat(fileWithId.file.name),children:\"\\u274C\"})]},fileWithId.id))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"upload-actions\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn-primary upload-btn\",onClick:handleUpload,disabled:uploading||!files||files.length===0,children:uploading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner\"}),\"Processing \",(files===null||files===void 0?void 0:files.length)||0,\" file(s)...\"]}):/*#__PURE__*/_jsx(_Fragment,{children:\"\\uD83D\\uDE80 Upload & Analyze with AI\"})})}),message&&/*#__PURE__*/_jsx(\"div\",{className:\"alert \".concat(message.includes('Success')||message.includes('processed')?'alert-success':'alert-error'),children:/*#__PURE__*/_jsx(\"pre\",{children:message})}),results&&/*#__PURE__*/_jsxs(\"div\",{className:\"processing-results\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCCA Processing Results\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Total Uploaded\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number\",children:results.totalUploaded})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Successfully Processed\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number success\",children:results.totalProcessed})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Failed\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-number error\",children:results.failedCount})]})]}),results.processedResumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"processed-resumes\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u2705 Successfully Processed Candidates\"}),/*#__PURE__*/_jsx(\"div\",{className:\"candidates-grid\",children:results.processedResumes.map((resume,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-header\",children:[/*#__PURE__*/_jsx(\"h5\",{children:resume.candidate_name}),/*#__PURE__*/_jsxs(\"span\",{className:\"score-badge\",style:{backgroundColor:getScoreColor(resume.score)},children:[resume.score.toFixed(1),\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"candidate-details\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Email:\"}),\" \",resume.email||'Not provided']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Skills:\"}),\" \",resume.skills_count,\" identified\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Experience:\"}),\" \",resume.experience_years,\" years\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"File:\"}),\" \",resume.filename]})]})]},index))})]}),results.failedResumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"failed-resumes\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"\\u274C Failed to Process\"}),/*#__PURE__*/_jsx(\"div\",{className:\"failed-list\",children:results.failedResumes.map((failed,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"failed-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"failed-filename\",children:failed.filename}),/*#__PURE__*/_jsx(\"span\",{className:\"failed-error\",children:failed.error})]},index))})]})]})]});};export default ResumeUpload;","map":{"version":3,"names":["React","useState","useRef","api","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ResumeUpload","_ref","socket","sendMessage","isConnected","files","setFiles","uploading","setUploading","message","setMessage","results","setResults","jobId","setJobId","dragOver","setDragOver","fileInputRef","generateFileId","concat","Date","now","Math","random","toString","substr","handleFileChange","e","selectedFiles","target","addFiles","Array","from","newFiles","filesWithId","map","file","id","preview","type","startsWith","URL","createObjectURL","undefined","prev","current","value","removeFile","fileId","updatedFiles","filter","f","removedFile","find","revokeObjectURL","length","removeAllFiles","forEach","fileWithId","handleDragOver","preventDefault","handleDragLeave","handleDrop","droppedFiles","dataTransfer","validateFiles","filesToValidate","errors","allowedTypes","maxSize","index","_file$name$split$pop","fileExtension","name","split","pop","toLowerCase","includes","push","size","handleUpload","validationErrors","join","console","log","formData","FormData","append","trim","response","post","headers","timeout","data","success","uploadResults","totalUploaded","total_uploaded","totalProcessed","total_processed","failedCount","failed_count","processedResumes","processed_resumes","failedResumes","failed_resumes","matchingResults","matching_results","successMsg","Error","error","_error$response","_error$response$data","errorMessage","detail","formatFileSize","bytes","k","sizes","i","floor","parseFloat","pow","toFixed","getScoreColor","score","getFileIcon","fileName","_fileName$split$pop","extension","className","children","htmlFor","placeholder","onChange","disabled","onDragOver","onDragLeave","onDrop","onClick","_fileInputRef$current","click","ref","multiple","accept","style","display","title","resume","candidate_name","backgroundColor","email","skills_count","experience_years","filename","failed"],"sources":["D:/Navikenz/pro/navihire/frontend/src/components/ResumeUpload.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport api from '../services/api';\r\n\r\ninterface ResumeUploadProps {\r\n  socket: WebSocket | null;\r\n  sendMessage: (message: string) => void;\r\n  isConnected: boolean;\r\n}\r\n\r\ninterface FileWithId {\r\n  file: File;\r\n  id: string;\r\n  preview?: string;\r\n}\r\n\r\ninterface ProcessedResume {\r\n  candidate_id: number;\r\n  filename: string;\r\n  candidate_name: string;\r\n  email: string;\r\n  status: string;\r\n  score: number;\r\n  skills_count: number;\r\n  experience_years: number;\r\n}\r\n\r\ninterface FailedResume {\r\n  filename: string;\r\n  error: string;\r\n  error_type: string;\r\n}\r\n\r\ninterface UploadResults {\r\n  totalUploaded: number;\r\n  totalProcessed: number;\r\n  failedCount: number;\r\n  processedResumes: ProcessedResume[];\r\n  failedResumes: FailedResume[];\r\n  matchingResults?: any;\r\n}\r\n\r\nconst ResumeUpload: React.FC<ResumeUploadProps> = ({ socket, sendMessage, isConnected }) => {\r\n  const [files, setFiles] = useState<FileWithId[]>([]);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [results, setResults] = useState<UploadResults | null>(null);\r\n  const [jobId, setJobId] = useState<string>('');\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const generateFileId = () => `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles) {\r\n      addFiles(Array.from(selectedFiles));\r\n    }\r\n  };\r\n\r\n  const addFiles = (newFiles: File[]) => {\r\n    const filesWithId: FileWithId[] = newFiles.map(file => ({\r\n      file,\r\n      id: generateFileId(),\r\n      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : undefined\r\n    }));\r\n    \r\n    setFiles(prev => [...prev, ...filesWithId]);\r\n    setResults(null);\r\n    setMessage('');\r\n    \r\n    // Reset file input to allow selecting the same file again\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const removeFile = (fileId: string) => {\r\n    setFiles(prev => {\r\n      const updatedFiles = prev.filter(f => f.id !== fileId);\r\n      \r\n      // Clean up object URLs to prevent memory leaks\r\n      const removedFile = prev.find(f => f.id === fileId);\r\n      if (removedFile?.preview) {\r\n        URL.revokeObjectURL(removedFile.preview);\r\n      }\r\n      \r\n      return updatedFiles;\r\n    });\r\n    \r\n    // Clear results if no files remain\r\n    if (files.length === 1) {\r\n      setResults(null);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const removeAllFiles = () => {\r\n    // Clean up all object URLs\r\n    files.forEach(fileWithId => {\r\n      if (fileWithId.preview) {\r\n        URL.revokeObjectURL(fileWithId.preview);\r\n      }\r\n    });\r\n    \r\n    setFiles([]);\r\n    setResults(null);\r\n    setMessage('');\r\n    \r\n    // Reset file input\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n    \r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    if (droppedFiles.length > 0) {\r\n      addFiles(droppedFiles);\r\n    }\r\n  };\r\n\r\n  const validateFiles = (filesToValidate: FileWithId[]): string[] => {\r\n    const errors: string[] = [];\r\n    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n\r\n    filesToValidate.forEach((fileWithId, index) => {\r\n      const file = fileWithId.file;\r\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n      \r\n      if (!allowedTypes.includes(fileExtension)) {\r\n        errors.push(`File ${index + 1} (${file.name}): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.`);\r\n      }\r\n      \r\n      if (file.size > maxSize) {\r\n        errors.push(`File ${index + 1} (${file.name}): File too large. Maximum size is 10MB.`);\r\n      }\r\n      \r\n      if (file.size === 0) {\r\n        errors.push(`File ${index + 1} (${file.name}): File is empty.`);\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!files || files.length === 0) {\r\n      setMessage('Please select files to upload');\r\n      return;\r\n    }\r\n\r\n    // Validate files\r\n    const validationErrors = validateFiles(files);\r\n    if (validationErrors.length > 0) {\r\n      setMessage(`Validation errors:\\n${validationErrors.join('\\n')}`);\r\n      return;\r\n    }\r\n\r\n    setUploading(true);\r\n    setMessage('');\r\n    setResults(null);\r\n\r\n    try {\r\n      console.log(`📤 Starting upload of ${files.length} files`);\r\n      \r\n      // Create FormData for file upload\r\n      const formData = new FormData();\r\n      files.forEach(fileWithId => {\r\n        formData.append('files', fileWithId.file);\r\n      });\r\n      \r\n      // Add job ID if provided\r\n      if (jobId.trim()) {\r\n        formData.append('job_id', jobId.trim());\r\n      }\r\n\r\n      // Send WebSocket message about upload start\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Starting AI analysis of ${files.length} resume(s)${jobId ? ` for job ${jobId}` : ''}`);\r\n      }\r\n\r\n      console.log('📡 Sending files to backend...');\r\n      \r\n      // Upload and process files\r\n      const response = await api.post('/api/v1/resumes/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        timeout: 120000 // 2 minutes timeout for large files\r\n      });\r\n\r\n      console.log('✅ Upload response:', response.data);\r\n\r\n      if (response.data.success) {\r\n        const uploadResults: UploadResults = {\r\n          totalUploaded: response.data.total_uploaded,\r\n          totalProcessed: response.data.total_processed,\r\n          failedCount: response.data.failed_count,\r\n          processedResumes: response.data.processed_resumes || [],\r\n          failedResumes: response.data.failed_resumes || [],\r\n          matchingResults: response.data.matching_results\r\n        };\r\n\r\n        setResults(uploadResults);\r\n        \r\n        // Success message\r\n        let successMsg = `Successfully processed ${uploadResults.totalProcessed} out of ${uploadResults.totalUploaded} resume(s)`;\r\n        if (uploadResults.failedCount > 0) {\r\n          successMsg += `. ${uploadResults.failedCount} file(s) failed to process.`;\r\n        }\r\n        setMessage(successMsg);\r\n\r\n        // Send WebSocket message about completion\r\n        if (isConnected && sendMessage) {\r\n          sendMessage(`AI analysis complete: ${uploadResults.totalProcessed} resumes processed successfully${uploadResults.matchingResults ? ` with job matching results` : ''}`);\r\n        }\r\n\r\n        // Clear files after successful upload\r\n        removeAllFiles();\r\n        \r\n      } else {\r\n        throw new Error(response.data.error || 'Upload failed');\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Upload failed:', error);\r\n      \r\n      let errorMessage = 'Upload failed: ';\r\n      if (error.response?.data?.detail) {\r\n        errorMessage += error.response.data.detail;\r\n      } else if (error.message) {\r\n        errorMessage += error.message;\r\n      } else {\r\n        errorMessage += 'Unknown error occurred';\r\n      }\r\n      \r\n      setMessage(errorMessage);\r\n\r\n      // Send WebSocket message about failure\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Resume upload failed: ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number): string => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 80) return '#10b981'; // Green\r\n    if (score >= 60) return '#f59e0b'; // Yellow\r\n    if (score >= 40) return '#ef4444'; // Red\r\n    return '#6b7280'; // Gray\r\n  };\r\n\r\n  const getFileIcon = (fileName: string): string => {\r\n    const extension = fileName.split('.').pop()?.toLowerCase();\r\n    switch (extension) {\r\n      case 'pdf': return '📄';\r\n      case 'doc':\r\n      case 'docx': return '📝';\r\n      case 'txt': return '📃';\r\n      default: return '📄';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"resume-upload\">\r\n      <div className=\"page-header\">\r\n        <h2>📄 Resume Upload & AI Analysis</h2>\r\n        <p>Upload resumes for intelligent parsing, scoring, and candidate matching</p>\r\n      </div>\r\n\r\n      {/* Job ID Input */}\r\n      <div className=\"job-selection\">\r\n        <label htmlFor=\"jobId\">Job ID (Optional):</label>\r\n        <input\r\n          id=\"jobId\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Job ID for candidate matching\"\r\n          value={jobId}\r\n          onChange={(e) => setJobId(e.target.value)}\r\n          disabled={uploading}\r\n        />\r\n        <small>If provided, candidates will be automatically matched to this job</small>\r\n      </div>\r\n\r\n      {/* Upload Area */}\r\n      <div \r\n        className={`upload-area ${dragOver ? 'drag-over' : ''}`}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n        onClick={() => fileInputRef.current?.click()}\r\n      >\r\n        <div className=\"upload-icon\">📄</div>\r\n        <h3>Drag & Drop Resumes Here</h3>\r\n        <p>Or click to select files (PDF, DOC, DOCX, TXT)</p>\r\n        <p className=\"file-limits\">Maximum 10MB per file • Up to 20 files at once</p>\r\n        <input \r\n          ref={fileInputRef}\r\n          type=\"file\" \r\n          multiple \r\n          accept=\".pdf,.doc,.docx,.txt\"\r\n          onChange={handleFileChange}\r\n          disabled={uploading}\r\n          style={{ display: 'none' }}\r\n        />\r\n      </div>\r\n\r\n      {/* Selected Files Display with Remove Options */}\r\n      {files.length > 0 && (\r\n        <div className=\"selected-files\">\r\n          <div className=\"files-header\">\r\n            <h4>📋 Selected Files ({files.length})</h4>\r\n            <button \r\n              className=\"btn-remove-all\"\r\n              onClick={removeAllFiles}\r\n              disabled={uploading}\r\n              title=\"Remove all files\"\r\n            >\r\n              🗑️ Remove All\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"files-list\">\r\n            {files.map((fileWithId) => (\r\n              <div key={fileWithId.id} className=\"file-item\">\r\n                <div className=\"file-icon\">\r\n                  {getFileIcon(fileWithId.file.name)}\r\n                </div>\r\n                \r\n                <div className=\"file-details\">\r\n                  <span className=\"file-name\">{fileWithId.file.name}</span>\r\n                  <div className=\"file-meta\">\r\n                    <span className=\"file-size\">{formatFileSize(fileWithId.file.size)}</span>\r\n                    <span className=\"file-type\">{fileWithId.file.type || 'Unknown'}</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <button \r\n                  className=\"btn-remove-file\"\r\n                  onClick={() => removeFile(fileWithId.id)}\r\n                  disabled={uploading}\r\n                  title={`Remove ${fileWithId.file.name}`}\r\n                >\r\n                  ❌\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Upload Button */}\r\n      <div className=\"upload-actions\">\r\n        <button \r\n          className=\"btn-primary upload-btn\" \r\n          onClick={handleUpload}\r\n          disabled={uploading || !files || files.length === 0}\r\n        >\r\n          {uploading ? (\r\n            <>\r\n              <span className=\"spinner\"></span>\r\n              Processing {files?.length || 0} file(s)...\r\n            </>\r\n          ) : (\r\n            <>\r\n              🚀 Upload & Analyze with AI\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status Message */}\r\n      {message && (\r\n        <div className={`alert ${message.includes('Success') || message.includes('processed') ? 'alert-success' : 'alert-error'}`}>\r\n          <pre>{message}</pre>\r\n        </div>\r\n      )}\r\n\r\n      {/* Processing Results */}\r\n      {results && (\r\n        <div className=\"processing-results\">\r\n          <h3>📊 Processing Results</h3>\r\n          \r\n          {/* Summary Stats */}\r\n          <div className=\"results-summary\">\r\n            <div className=\"stat-card\">\r\n              <h4>Total Uploaded</h4>\r\n              <span className=\"stat-number\">{results.totalUploaded}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Successfully Processed</h4>\r\n              <span className=\"stat-number success\">{results.totalProcessed}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Failed</h4>\r\n              <span className=\"stat-number error\">{results.failedCount}</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Processed Resumes */}\r\n          {results.processedResumes.length > 0 && (\r\n            <div className=\"processed-resumes\">\r\n              <h4>✅ Successfully Processed Candidates</h4>\r\n              <div className=\"candidates-grid\">\r\n                {results.processedResumes.map((resume, index) => (\r\n                  <div key={index} className=\"candidate-card\">\r\n                    <div className=\"candidate-header\">\r\n                      <h5>{resume.candidate_name}</h5>\r\n                      <span \r\n                        className=\"score-badge\"\r\n                        style={{ backgroundColor: getScoreColor(resume.score) }}\r\n                      >\r\n                        {resume.score.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"candidate-details\">\r\n                      <p><strong>Email:</strong> {resume.email || 'Not provided'}</p>\r\n                      <p><strong>Skills:</strong> {resume.skills_count} identified</p>\r\n                      <p><strong>Experience:</strong> {resume.experience_years} years</p>\r\n                      <p><strong>File:</strong> {resume.filename}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Failed Resumes */}\r\n          {results.failedResumes.length > 0 && (\r\n            <div className=\"failed-resumes\">\r\n              <h4>❌ Failed to Process</h4>\r\n              <div className=\"failed-list\">\r\n                {results.failedResumes.map((failed, index) => (\r\n                  <div key={index} className=\"failed-item\">\r\n                    <span className=\"failed-filename\">{failed.filename}</span>\r\n                    <span className=\"failed-error\">{failed.error}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResumeUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}