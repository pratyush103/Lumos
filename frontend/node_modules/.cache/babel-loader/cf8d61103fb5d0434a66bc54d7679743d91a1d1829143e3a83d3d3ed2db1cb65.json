{"ast":null,"code":"// src/utils/gemini.ts\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nexport async function callGemini(prompt, options) {\n  try {\n    var _response$promptFeedb, _response$promptFeedb2;\n    const model = genAI.getGenerativeModel({\n      model: (options === null || options === void 0 ? void 0 : options.model) || 'gemini-2.0-flash',\n      generationConfig: {\n        temperature: (options === null || options === void 0 ? void 0 : options.temperature) || 0.7\n      }\n    });\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return {\n      text: response.text(),\n      safetyRatings: ((_response$promptFeedb = response.promptFeedback) === null || _response$promptFeedb === void 0 ? void 0 : (_response$promptFeedb2 = _response$promptFeedb.safetyRatings) === null || _response$promptFeedb2 === void 0 ? void 0 : _response$promptFeedb2.map(rating => ({\n        category: rating.category,\n        probability: rating.probability\n      }))) || []\n    };\n  } catch (error) {\n    console.error('Gemini API Error:', error);\n    return {\n      text: 'Unable to generate response at this time',\n      safetyRatings: []\n    };\n  }\n}","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","GEMINI_API_KEY","callGemini","prompt","options","_response$promptFeedb","_response$promptFeedb2","model","getGenerativeModel","generationConfig","temperature","result","generateContent","response","text","safetyRatings","promptFeedback","map","rating","category","probability","error","console"],"sources":["D:/Navikenz/pro/navihire/frontend/src/utils/gemini.ts"],"sourcesContent":["// src/utils/gemini.ts\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\r\n\r\ninterface GeminiResponse {\r\n  text: string;\r\n  safetyRatings: Array<{ category: string; probability: string }>;\r\n}\r\n\r\nexport async function callGemini(\r\n  prompt: string,\r\n  options?: {\r\n    temperature?: number;\r\n    model?: 'gemini-2.0-flash' | 'gemini-2.0-pro';\r\n  }\r\n): Promise<GeminiResponse> {\r\n  try {\r\n    const model = genAI.getGenerativeModel({\r\n      model: options?.model || 'gemini-2.0-flash',\r\n      generationConfig: {\r\n        temperature: options?.temperature || 0.7,\r\n      }\r\n    });\r\n\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n\r\n    return {\r\n      text: response.text(),\r\n      safetyRatings: response.promptFeedback?.safetyRatings?.map(rating => ({\r\n        category: rating.category,\r\n        probability: rating.probability\r\n      })) || []\r\n    };\r\n  } catch (error) {\r\n    console.error('Gemini API Error:', error);\r\n    return {\r\n      text: 'Unable to generate response at this time',\r\n      safetyRatings: []\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,MAAMC,KAAK,GAAG,IAAID,kBAAkB,CAACE,OAAO,CAACC,GAAG,CAACC,cAAe,CAAC;AAOjE,OAAO,eAAeC,UAAUA,CAC9BC,MAAc,EACdC,OAGC,EACwB;EACzB,IAAI;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACF,MAAMC,KAAK,GAAGT,KAAK,CAACU,kBAAkB,CAAC;MACrCD,KAAK,EAAE,CAAAH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,KAAK,KAAI,kBAAkB;MAC3CE,gBAAgB,EAAE;QAChBC,WAAW,EAAE,CAAAN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,WAAW,KAAI;MACvC;IACF,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,MAAMJ,KAAK,CAACK,eAAe,CAACT,MAAM,CAAC;IAClD,MAAMU,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IAEtC,OAAO;MACLC,IAAI,EAAED,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrBC,aAAa,EAAE,EAAAV,qBAAA,GAAAQ,QAAQ,CAACG,cAAc,cAAAX,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBU,aAAa,cAAAT,sBAAA,uBAAtCA,sBAAA,CAAwCW,GAAG,CAACC,MAAM,KAAK;QACpEC,QAAQ,EAAED,MAAM,CAACC,QAAQ;QACzBC,WAAW,EAAEF,MAAM,CAACE;MACtB,CAAC,CAAC,CAAC,KAAI;IACT,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO;MACLP,IAAI,EAAE,0CAA0C;MAChDC,aAAa,EAAE;IACjB,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}