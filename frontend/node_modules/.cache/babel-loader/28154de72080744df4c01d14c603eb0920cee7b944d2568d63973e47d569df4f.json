{"ast":null,"code":"import axios from'axios';import{callGemini}from'../utils/gemini';class FlightSearchService{constructor(){this.serpApiKey=\"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";this.backendUrl='http://localhost:8000';}async searchFlights(params){console.log('Searching flights with params:',params);// Try SerpAPI first\nif(this.serpApiKey){try{const serpResults=await this.searchWithSerpAPI(params);if(serpResults.length>0){console.log('SerpAPI results found:',serpResults.length);return serpResults;}else console.warn('Serp Result length is zero');}catch(error){console.warn('SerpAPI failed:',error);}}else{console.warn('Problem with serpApi key');};// Try backend scraping\ntry{const scrapingResults=await this.searchWithBackendScraping(params);if(scrapingResults.length>0){console.log('Backend scraping results found:',scrapingResults.length);return scrapingResults;}}catch(error){console.warn('Backend scraping failed:',error);}// If all methods fail, return empty array (no fallback data)\nconsole.log('All flight search methods failed');return[];}async searchWithSerpAPI(params){const departureId=await this.getAirportCode(params.origin);const arrivalId=await this.getAirportCode(params.destination);const serpParams={engine:'google_flights',departure_id:departureId,arrival_id:arrivalId,outbound_date:params.departureDate,return_date:params.returnDate,currency:'INR',hl:'en',api_key:this.serpApiKey};const response=await axios.get('https://serpapi.com/search',{params:serpParams,timeout:10000});if(response.data.best_flights){return this.formatSerpAPIResults(response.data.best_flights);}return[];}async searchWithBackendScraping(params){const response=await axios.post(\"\".concat(this.backendUrl,\"/api/v1/flights/search\"),{origin:params.origin,destination:params.destination,date:params.departureDate,passengers:params.passengers||1,class:params.class||'economy'},{timeout:15000});if(response.data.success&&response.data.flight_results){return this.formatBackendResults(response.data.flight_results,params);}return[];}formatSerpAPIResults(flights){return flights.map((flight,index)=>{var _flight$flights$,_flight$flights$2,_flight$price,_flight$flights$3,_flight$flights$3$dep,_flight$flights$4,_flight$flights$4$arr,_flight$flights;return{id:\"serp_\".concat(index),airline:((_flight$flights$=flight.flights[0])===null||_flight$flights$===void 0?void 0:_flight$flights$.airline)||'Unknown',flightNumber:((_flight$flights$2=flight.flights[0])===null||_flight$flights$2===void 0?void 0:_flight$flights$2.flight_number)||'N/A',price:\"\\u20B9\".concat(((_flight$price=flight.price)===null||_flight$price===void 0?void 0:_flight$price.toLocaleString())||'N/A'),departureTime:((_flight$flights$3=flight.flights[0])===null||_flight$flights$3===void 0?void 0:(_flight$flights$3$dep=_flight$flights$3.departure_airport)===null||_flight$flights$3$dep===void 0?void 0:_flight$flights$3$dep.time)||'N/A',arrivalTime:((_flight$flights$4=flight.flights[0])===null||_flight$flights$4===void 0?void 0:(_flight$flights$4$arr=_flight$flights$4.arrival_airport)===null||_flight$flights$4$arr===void 0?void 0:_flight$flights$4$arr.time)||'N/A',duration:flight.total_duration||'N/A',stops:((_flight$flights=flight.flights)===null||_flight$flights===void 0?void 0:_flight$flights.length)-1||0,bookingUrl:flight.booking_token?\"https://www.google.com/travel/flights/booking?token=\".concat(flight.booking_token):this.generateSkyscannerUrl(flight),source:'serpapi'};});}formatBackendResults(flights,params){return flights.map((flight,index)=>({id:\"backend_\".concat(index),airline:flight.airline||'Unknown',flightNumber:flight.flight_number||'N/A',price:flight.price||'N/A',departureTime:flight.departure_time||'N/A',arrivalTime:flight.arrival_time||'N/A',duration:flight.duration||'N/A',stops:flight.stops||0,bookingUrl:this.generateBookingUrl(flight,params),source:'scraping'}));}generateBookingUrl(flight,params){var _flight$airline;// Generate booking URL based on airline\nconst airline=(_flight$airline=flight.airline)===null||_flight$airline===void 0?void 0:_flight$airline.toLowerCase();if(airline!==null&&airline!==void 0&&airline.includes('indigo')){return\"https://www.goindigo.in/booking/flight-select?from=\".concat(params.origin,\"&to=\").concat(params.destination,\"&date=\").concat(params.departureDate);}else if(airline!==null&&airline!==void 0&&airline.includes('air india')){return\"https://www.airindia.in/booking?from=\".concat(params.origin,\"&to=\").concat(params.destination,\"&date=\").concat(params.departureDate);}else if(airline!==null&&airline!==void 0&&airline.includes('spicejet')){return\"https://www.spicejet.com/booking?from=\".concat(params.origin,\"&to=\").concat(params.destination,\"&date=\").concat(params.departureDate);}return this.generateSkyscannerUrl({origin:params.origin,destination:params.destination,date:params.departureDate});}generateSkyscannerUrl(params){const origin=this.getAirportCode(params.origin||'DEL');const destination=this.getAirportCode(params.destination||'BOM');const date=params.date||new Date().toISOString().split('T')[0];return\"https://www.skyscanner.co.in/transport/flights/\".concat(origin,\"/\").concat(destination,\"/\").concat(date.replace(/-/g,''),\"/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy\");}async getAirportCode(cityName){const airportCodes={'delhi':'DEL','mumbai':'BOM','bangalore':'BLR','chennai':'MAA','kolkata':'CCU','hyderabad':'HYD','pune':'PNQ','ahmedabad':'AMD','goa':'GOI','kochi':'COK','jaipur':'JAI','lucknow':'LKO','chandigarh':'IXC','bhubaneswar':'BBI','indore':'IDR'};const normalizedCity=cityName.toLowerCase();if(airportCodes[normalizedCity]){return airportCodes[normalizedCity];}// Use Gemini for unknown cities\ntry{const response=await callGemini(\"Analyze the city name \\\"\".concat(cityName,\"\\\" and return ONLY its IATA airport code in uppercase. \\n      Example responses: DEL, BOM, BLR. No other text.\"),{temperature:0.1}// Lower temperature for precise answers\n);const iataMatch=response.text.match(/[A-Z]{3}/);if(iataMatch){return iataMatch[0];}return normalizedCity.slice(0,3).toUpperCase();}catch(error){console.error('Gemini IATA lookup failed:',error);return'XXX';}}}export const flightService=new FlightSearchService();","map":{"version":3,"names":["axios","callGemini","FlightSearchService","constructor","serpApiKey","backendUrl","searchFlights","params","console","log","serpResults","searchWithSerpAPI","length","warn","error","scrapingResults","searchWithBackendScraping","departureId","getAirportCode","origin","arrivalId","destination","serpParams","engine","departure_id","arrival_id","outbound_date","departureDate","return_date","returnDate","currency","hl","api_key","response","get","timeout","data","best_flights","formatSerpAPIResults","post","concat","date","passengers","class","success","flight_results","formatBackendResults","flights","map","flight","index","_flight$flights$","_flight$flights$2","_flight$price","_flight$flights$3","_flight$flights$3$dep","_flight$flights$4","_flight$flights$4$arr","_flight$flights","id","airline","flightNumber","flight_number","price","toLocaleString","departureTime","departure_airport","time","arrivalTime","arrival_airport","duration","total_duration","stops","bookingUrl","booking_token","generateSkyscannerUrl","source","departure_time","arrival_time","generateBookingUrl","_flight$airline","toLowerCase","includes","Date","toISOString","split","replace","cityName","airportCodes","normalizedCity","temperature","iataMatch","text","match","slice","toUpperCase","flightService"],"sources":["D:/Navikenz/pro/navihire/frontend/src/services/FlightService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { callGemini } from '../utils/gemini';\r\n\r\ninterface FlightSearchParams {\r\n  origin: string;\r\n  destination: string;\r\n  departureDate: string;\r\n  returnDate?: string;\r\n  passengers?: number;\r\n  class?: string;\r\n}\r\n\r\ninterface FlightResult {\r\n  id: string;\r\n  airline: string;\r\n  flightNumber: string;\r\n  price: string;\r\n  departureTime: string;\r\n  arrivalTime: string;\r\n  duration: string;\r\n  stops: number;\r\n  bookingUrl: string;\r\n  source: 'serpapi' | 'scraping' | 'fallback';\r\n}\r\n\r\nclass FlightSearchService {\r\n  private serpApiKey = \"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";\r\n  private backendUrl = 'http://localhost:8000';\r\n\r\n  async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    console.log('Searching flights with params:', params);\r\n\r\n    // Try SerpAPI first\r\n    if (this.serpApiKey) {\r\n      try {\r\n        const serpResults = await this.searchWithSerpAPI(params);\r\n        if (serpResults.length > 0) {\r\n          console.log('SerpAPI results found:', serpResults.length);\r\n          return serpResults;\r\n        }\r\n        else console.warn('Serp Result length is zero');\r\n      } catch (error) {\r\n        console.warn('SerpAPI failed:', error);\r\n      }\r\n    }\r\n    else {console.warn('Problem with serpApi key')};\r\n\r\n    // Try backend scraping\r\n    try {\r\n      const scrapingResults = await this.searchWithBackendScraping(params);\r\n      if (scrapingResults.length > 0) {\r\n        console.log('Backend scraping results found:', scrapingResults.length);\r\n        return scrapingResults;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Backend scraping failed:', error);\r\n    }\r\n\r\n    // If all methods fail, return empty array (no fallback data)\r\n    console.log('All flight search methods failed');\r\n    return [];\r\n  }\r\n\r\n  private async searchWithSerpAPI(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    \r\n    const departureId = await this.getAirportCode(params.origin);\r\n    const arrivalId = await this.getAirportCode(params.destination);\r\n    \r\n    const serpParams = {\r\n      engine: 'google_flights',\r\n      departure_id: departureId,\r\n      arrival_id: arrivalId,\r\n      outbound_date: params.departureDate,\r\n      return_date: params.returnDate,\r\n      currency: 'INR',\r\n      hl: 'en',\r\n      api_key: this.serpApiKey\r\n    };\r\n\r\n    const response = await axios.get('https://serpapi.com/search', {\r\n      params: serpParams,\r\n      timeout: 10000\r\n    });\r\n\r\n    if (response.data.best_flights) {\r\n      return this.formatSerpAPIResults(response.data.best_flights);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private async searchWithBackendScraping(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\r\n      origin: params.origin,\r\n      destination: params.destination,\r\n      date: params.departureDate,\r\n      passengers: params.passengers || 1,\r\n      class: params.class || 'economy'\r\n    }, {\r\n      timeout: 15000\r\n    });\r\n\r\n    if (response.data.success && response.data.flight_results) {\r\n      return this.formatBackendResults(response.data.flight_results, params);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private formatSerpAPIResults(flights: any[]): FlightResult[] {\r\n    return flights.map((flight, index) => ({\r\n      id: `serp_${index}`,\r\n      airline: flight.flights[0]?.airline || 'Unknown',\r\n      flightNumber: flight.flights[0]?.flight_number || 'N/A',\r\n      price: `₹${flight.price?.toLocaleString() || 'N/A'}`,\r\n      departureTime: flight.flights[0]?.departure_airport?.time || 'N/A',\r\n      arrivalTime: flight.flights[0]?.arrival_airport?.time || 'N/A',\r\n      duration: flight.total_duration || 'N/A',\r\n      stops: flight.flights?.length - 1 || 0,\r\n      bookingUrl: flight.booking_token ? \r\n        `https://www.google.com/travel/flights/booking?token=${flight.booking_token}` :\r\n        this.generateSkyscannerUrl(flight),\r\n      source: 'serpapi'\r\n    }));\r\n  }\r\n\r\n  private formatBackendResults(flights: any[], params: FlightSearchParams): FlightResult[] {\r\n    return flights.map((flight, index) => ({\r\n      id: `backend_${index}`,\r\n      airline: flight.airline || 'Unknown',\r\n      flightNumber: flight.flight_number || 'N/A',\r\n      price: flight.price || 'N/A',\r\n      departureTime: flight.departure_time || 'N/A',\r\n      arrivalTime: flight.arrival_time || 'N/A',\r\n      duration: flight.duration || 'N/A',\r\n      stops: flight.stops || 0,\r\n      bookingUrl: this.generateBookingUrl(flight, params),\r\n      source: 'scraping'\r\n    }));\r\n  }\r\n\r\n  private generateBookingUrl(flight: any, params: FlightSearchParams): string {\r\n    // Generate booking URL based on airline\r\n    const airline = flight.airline?.toLowerCase();\r\n    \r\n    if (airline?.includes('indigo')) {\r\n      return `https://www.goindigo.in/booking/flight-select?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    } else if (airline?.includes('air india')) {\r\n      return `https://www.airindia.in/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    } else if (airline?.includes('spicejet')) {\r\n      return `https://www.spicejet.com/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    }\r\n    \r\n    return this.generateSkyscannerUrl({ origin: params.origin, destination: params.destination, date: params.departureDate });\r\n  }\r\n\r\n  private generateSkyscannerUrl(params: any): string {\r\n    const origin = this.getAirportCode(params.origin || 'DEL');\r\n    const destination = this.getAirportCode(params.destination || 'BOM');\r\n    const date = params.date || new Date().toISOString().split('T')[0];\r\n    \r\n    return `https://www.skyscanner.co.in/transport/flights/${origin}/${destination}/${date.replace(/-/g, '')}/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy`;\r\n  }\r\n\r\n  private async getAirportCode(cityName: string): Promise<string> {\r\n  const airportCodes: { [key: string]: string } = {\r\n    'delhi': 'DEL',\r\n    'mumbai': 'BOM',\r\n    'bangalore': 'BLR',\r\n    'chennai': 'MAA',\r\n    'kolkata': 'CCU',\r\n    'hyderabad': 'HYD',\r\n    'pune': 'PNQ',\r\n    'ahmedabad': 'AMD',\r\n    'goa': 'GOI',\r\n    'kochi': 'COK',\r\n    'jaipur': 'JAI',\r\n    'lucknow': 'LKO',\r\n    'chandigarh': 'IXC',\r\n    'bhubaneswar': 'BBI',\r\n    'indore': 'IDR'\r\n  };\r\n\r\n  const normalizedCity = cityName.toLowerCase();\r\n\r\n  if (airportCodes[normalizedCity]) {\r\n    return airportCodes[normalizedCity];\r\n  }\r\n\r\n  // Use Gemini for unknown cities\r\n  try {\r\n    const response = await callGemini(\r\n      `Analyze the city name \"${cityName}\" and return ONLY its IATA airport code in uppercase. \r\n      Example responses: DEL, BOM, BLR. No other text.`,\r\n      { temperature: 0.1 } // Lower temperature for precise answers\r\n    );\r\n\r\n    const iataMatch = response.text.match(/[A-Z]{3}/);\r\n    if (iataMatch) {\r\n      return iataMatch[0];\r\n    }\r\n    \r\n    return normalizedCity.slice(0, 3).toUpperCase();\r\n    \r\n  } catch (error) {\r\n    console.error('Gemini IATA lookup failed:', error);\r\n    return 'XXX';\r\n  }\r\n}\r\n}\r\n\r\nexport const flightService = new FlightSearchService();\r\nexport type { FlightResult, FlightSearchParams };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}