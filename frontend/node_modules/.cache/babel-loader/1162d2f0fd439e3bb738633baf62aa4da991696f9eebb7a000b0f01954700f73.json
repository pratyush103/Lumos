{"ast":null,"code":"// import axios from 'axios';\n// import { callGemini } from '../utils/gemini';\n\n// interface FlightSearchParams {\n//   origin: string;\n//   destination: string;\n//   departureDate: string;\n//   returnDate?: string;\n//   passengers?: number;\n//   class?: string;\n// }\n\n// interface FlightResult {\n//   id: string;\n//   airline: string;\n//   flightNumber: string;\n//   price: string;\n//   departureTime: string;\n//   arrivalTime: string;\n//   duration: string;\n//   stops: number;\n//   bookingUrl: string;\n//   source: 'serpapi' | 'scraping' | 'fallback';\n// }\n\n// // class FlightSearchService {\n// //   private serpApiKey = \"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";\n// //   private backendUrl = 'http://localhost:8000';\n\n// //   async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\n// //     console.log('Searching flights with params:', params);\n\n// //     // Try SerpAPI first\n// //     if (this.serpApiKey) {\n// //       try {\n// //         const serpResults = await this.searchWithSerpAPI(params);\n// //         if (serpResults.length > 0) {\n// //           console.log('SerpAPI results found:', serpResults.length);\n// //           return serpResults;\n// //         }\n// //         else console.warn('Serp Result length is zero');\n// //       } catch (error) {\n// //         console.warn('SerpAPI failed:', error);\n// //       }\n// //     }\n// //     else {console.warn('Problem with serpApi key')};\n\n// //     // Try backend scraping\n// //     try {\n// //       const scrapingResults = await this.searchWithBackendScraping(params);\n// //       if (scrapingResults.length > 0) {\n// //         console.log('Backend scraping results found:', scrapingResults.length);\n// //         return scrapingResults;\n// //       }\n// //     } catch (error) {\n// //       console.warn('Backend scraping failed:', error);\n// //     }\n\n// //     // If all methods fail, return empty array (no fallback data)\n// //     console.log('All flight search methods failed');\n// //     return [];\n// //   }\n\n// //   private async searchWithSerpAPI(params: FlightSearchParams): Promise<FlightResult[]> {\n\n// //     const departureId = await this.getAirportCode(params.origin);\n// //     const arrivalId = await this.getAirportCode(params.destination);\n\n// //     const serpParams = {\n// //       engine: 'google_flights',\n// //       departure_id: departureId,\n// //       arrival_id: arrivalId,\n// //       outbound_date: params.departureDate,\n// //       return_date: params.returnDate,\n// //       currency: 'INR',\n// //       hl: 'en',\n// //       api_key: this.serpApiKey\n// //     };\n\n// //     const response = await axios.get('https://serpapi.com/search', {\n// //       params: serpParams,\n// //       timeout: 10000\n// //     });\n\n// //     if (response.data.best_flights) {\n// //       return this.formatSerpAPIResults(response.data.best_flights);\n// //     }\n\n// //     return [];\n// //   }\n\n// //   private async searchWithBackendScraping(params: FlightSearchParams): Promise<FlightResult[]> {\n// //     const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\n// //       origin: params.origin,\n// //       destination: params.destination,\n// //       date: params.departureDate,\n// //       passengers: params.passengers || 1,\n// //       class: params.class || 'economy'\n// //     }, {\n// //       timeout: 15000\n// //     });\n\n// //     if (response.data.success && response.data.flight_results) {\n// //       return this.formatBackendResults(response.data.flight_results, params);\n// //     }\n\n// //     return [];\n// //   }\n\n// //   private formatSerpAPIResults(flights: any[]): FlightResult[] {\n// //     return flights.map((flight, index) => ({\n// //       id: `serp_${index}`,\n// //       airline: flight.flights[0]?.airline || 'Unknown',\n// //       flightNumber: flight.flights[0]?.flight_number || 'N/A',\n// //       price: `₹${flight.price?.toLocaleString() || 'N/A'}`,\n// //       departureTime: flight.flights[0]?.departure_airport?.time || 'N/A',\n// //       arrivalTime: flight.flights[0]?.arrival_airport?.time || 'N/A',\n// //       duration: flight.total_duration || 'N/A',\n// //       stops: flight.flights?.length - 1 || 0,\n// //       bookingUrl: flight.booking_token ? \n// //         `https://www.google.com/travel/flights/booking?token=${flight.booking_token}` :\n// //         this.generateSkyscannerUrl(flight),\n// //       source: 'serpapi'\n// //     }));\n// //   }\n\n// //   private formatBackendResults(flights: any[], params: FlightSearchParams): FlightResult[] {\n// //     return flights.map((flight, index) => ({\n// //       id: `backend_${index}`,\n// //       airline: flight.airline || 'Unknown',\n// //       flightNumber: flight.flight_number || 'N/A',\n// //       price: flight.price || 'N/A',\n// //       departureTime: flight.departure_time || 'N/A',\n// //       arrivalTime: flight.arrival_time || 'N/A',\n// //       duration: flight.duration || 'N/A',\n// //       stops: flight.stops || 0,\n// //       bookingUrl: this.generateBookingUrl(flight, params),\n// //       source: 'scraping'\n// //     }));\n// //   }\n\n// //   private generateBookingUrl(flight: any, params: FlightSearchParams): string {\n// //     // Generate booking URL based on airline\n// //     const airline = flight.airline?.toLowerCase();\n\n// //     if (airline?.includes('indigo')) {\n// //       return `https://www.goindigo.in/booking/flight-select?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n// //     } else if (airline?.includes('air india')) {\n// //       return `https://www.airindia.in/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n// //     } else if (airline?.includes('spicejet')) {\n// //       return `https://www.spicejet.com/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n// //     }\n\n// //     return this.generateSkyscannerUrl({ origin: params.origin, destination: params.destination, date: params.departureDate });\n// //   }\n\n// //   private generateSkyscannerUrl(params: any): string {\n// //     const origin = this.getAirportCode(params.origin || 'DEL');\n// //     const destination = this.getAirportCode(params.destination || 'BOM');\n// //     const date = params.date || new Date().toISOString().split('T')[0];\n\n// //     return `https://www.skyscanner.co.in/transport/flights/${origin}/${destination}/${date.replace(/-/g, '')}/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy`;\n// //   }\n\n// //   private async getAirportCode(cityName: string): Promise<string> {\n// //   const airportCodes: { [key: string]: string } = {\n// //     'delhi': 'DEL',\n// //     'mumbai': 'BOM',\n// //     'bangalore': 'BLR',\n// //     'chennai': 'MAA',\n// //     'kolkata': 'CCU',\n// //     'hyderabad': 'HYD',\n// //     'pune': 'PNQ',\n// //     'ahmedabad': 'AMD',\n// //     'goa': 'GOI',\n// //     'kochi': 'COK',\n// //     'jaipur': 'JAI',\n// //     'lucknow': 'LKO',\n// //     'chandigarh': 'IXC',\n// //     'bhubaneswar': 'BBI',\n// //     'indore': 'IDR'\n// //   };\n\n// //   const normalizedCity = cityName.toLowerCase();\n\n// //   if (airportCodes[normalizedCity]) {\n// //     return airportCodes[normalizedCity];\n// //   }\n\n// //   // Use Gemini for unknown cities\n// //   try {\n// //     const response = await callGemini(\n// //       `Analyze the city name \"${cityName}\" and return ONLY its IATA airport code in uppercase. \n// //       Example responses: DEL, BOM, BLR. No other text.`,\n// //       { temperature: 0.1 } // Lower temperature for precise answers\n// //     );\n\n// //     const iataMatch = response.text.match(/[A-Z]{3}/);\n// //     if (iataMatch) {\n// //       return iataMatch[0];\n// //     }\n\n// //     return normalizedCity.slice(0, 3).toUpperCase();\n\n// //   } catch (error) {\n// //     console.error('Gemini IATA lookup failed:', error);\n// //     return 'XXX';\n// //   }\n// // }\n// // }\n\n// class FlightSearchService {\n//   private backendUrl = 'http://localhost:8000';\n\n//   async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\n//     console.log('🔍 Searching flights via backend:', params);\n\n//     try {\n//       // Only use backend - remove SerpAPI direct calls\n//       const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\n//         origin: params.origin,\n//         destination: params.destination,\n//         date: params.departureDate,\n//         passengers: params.passengers || 1,\n//         class: params.class || 'economy'\n//       }, {\n//         timeout: 15000\n//       });\n\n//       if (response.data.success && response.data.flight_results) {\n//         console.log('✅ Backend results found:', response.data.flight_results.length);\n//         return response.data.flight_results;\n//       } else {\n//         console.log('❌ Backend search failed:', response.data.error);\n//         return [];\n//       }\n//     } catch (error) {\n//       console.error('❌ Flight search failed:', error);\n//       return [];\n//     }\n//   }\n\n// }\n\n// export const flightService = new FlightSearchService();\n// export type { FlightResult, FlightSearchParams };\n\nimport api from './api';\nexport const searchFlights = async request => {\n  try {\n    const response = await api.post('/api/v1/flights/search', request);\n    if (response.data.success) {\n      return response.data.flight_results || [];\n    } else {\n      throw new Error(response.data.error || 'Flight search failed');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Flight search error:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Flight search failed');\n  }\n};","map":{"version":3,"names":["api","searchFlights","request","response","post","data","success","flight_results","Error","error","_error$response","_error$response$data","console","message"],"sources":["D:/Navikenz/pro/navihire/frontend/src/services/FlightService.ts"],"sourcesContent":["// import axios from 'axios';\r\n// import { callGemini } from '../utils/gemini';\r\n\r\n// interface FlightSearchParams {\r\n//   origin: string;\r\n//   destination: string;\r\n//   departureDate: string;\r\n//   returnDate?: string;\r\n//   passengers?: number;\r\n//   class?: string;\r\n// }\r\n\r\n// interface FlightResult {\r\n//   id: string;\r\n//   airline: string;\r\n//   flightNumber: string;\r\n//   price: string;\r\n//   departureTime: string;\r\n//   arrivalTime: string;\r\n//   duration: string;\r\n//   stops: number;\r\n//   bookingUrl: string;\r\n//   source: 'serpapi' | 'scraping' | 'fallback';\r\n// }\r\n\r\n// // class FlightSearchService {\r\n// //   private serpApiKey = \"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";\r\n// //   private backendUrl = 'http://localhost:8000';\r\n\r\n// //   async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\r\n// //     console.log('Searching flights with params:', params);\r\n\r\n// //     // Try SerpAPI first\r\n// //     if (this.serpApiKey) {\r\n// //       try {\r\n// //         const serpResults = await this.searchWithSerpAPI(params);\r\n// //         if (serpResults.length > 0) {\r\n// //           console.log('SerpAPI results found:', serpResults.length);\r\n// //           return serpResults;\r\n// //         }\r\n// //         else console.warn('Serp Result length is zero');\r\n// //       } catch (error) {\r\n// //         console.warn('SerpAPI failed:', error);\r\n// //       }\r\n// //     }\r\n// //     else {console.warn('Problem with serpApi key')};\r\n\r\n// //     // Try backend scraping\r\n// //     try {\r\n// //       const scrapingResults = await this.searchWithBackendScraping(params);\r\n// //       if (scrapingResults.length > 0) {\r\n// //         console.log('Backend scraping results found:', scrapingResults.length);\r\n// //         return scrapingResults;\r\n// //       }\r\n// //     } catch (error) {\r\n// //       console.warn('Backend scraping failed:', error);\r\n// //     }\r\n\r\n// //     // If all methods fail, return empty array (no fallback data)\r\n// //     console.log('All flight search methods failed');\r\n// //     return [];\r\n// //   }\r\n\r\n// //   private async searchWithSerpAPI(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    \r\n// //     const departureId = await this.getAirportCode(params.origin);\r\n// //     const arrivalId = await this.getAirportCode(params.destination);\r\n    \r\n// //     const serpParams = {\r\n// //       engine: 'google_flights',\r\n// //       departure_id: departureId,\r\n// //       arrival_id: arrivalId,\r\n// //       outbound_date: params.departureDate,\r\n// //       return_date: params.returnDate,\r\n// //       currency: 'INR',\r\n// //       hl: 'en',\r\n// //       api_key: this.serpApiKey\r\n// //     };\r\n\r\n// //     const response = await axios.get('https://serpapi.com/search', {\r\n// //       params: serpParams,\r\n// //       timeout: 10000\r\n// //     });\r\n\r\n// //     if (response.data.best_flights) {\r\n// //       return this.formatSerpAPIResults(response.data.best_flights);\r\n// //     }\r\n\r\n// //     return [];\r\n// //   }\r\n\r\n// //   private async searchWithBackendScraping(params: FlightSearchParams): Promise<FlightResult[]> {\r\n// //     const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\r\n// //       origin: params.origin,\r\n// //       destination: params.destination,\r\n// //       date: params.departureDate,\r\n// //       passengers: params.passengers || 1,\r\n// //       class: params.class || 'economy'\r\n// //     }, {\r\n// //       timeout: 15000\r\n// //     });\r\n\r\n// //     if (response.data.success && response.data.flight_results) {\r\n// //       return this.formatBackendResults(response.data.flight_results, params);\r\n// //     }\r\n\r\n// //     return [];\r\n// //   }\r\n\r\n// //   private formatSerpAPIResults(flights: any[]): FlightResult[] {\r\n// //     return flights.map((flight, index) => ({\r\n// //       id: `serp_${index}`,\r\n// //       airline: flight.flights[0]?.airline || 'Unknown',\r\n// //       flightNumber: flight.flights[0]?.flight_number || 'N/A',\r\n// //       price: `₹${flight.price?.toLocaleString() || 'N/A'}`,\r\n// //       departureTime: flight.flights[0]?.departure_airport?.time || 'N/A',\r\n// //       arrivalTime: flight.flights[0]?.arrival_airport?.time || 'N/A',\r\n// //       duration: flight.total_duration || 'N/A',\r\n// //       stops: flight.flights?.length - 1 || 0,\r\n// //       bookingUrl: flight.booking_token ? \r\n// //         `https://www.google.com/travel/flights/booking?token=${flight.booking_token}` :\r\n// //         this.generateSkyscannerUrl(flight),\r\n// //       source: 'serpapi'\r\n// //     }));\r\n// //   }\r\n\r\n// //   private formatBackendResults(flights: any[], params: FlightSearchParams): FlightResult[] {\r\n// //     return flights.map((flight, index) => ({\r\n// //       id: `backend_${index}`,\r\n// //       airline: flight.airline || 'Unknown',\r\n// //       flightNumber: flight.flight_number || 'N/A',\r\n// //       price: flight.price || 'N/A',\r\n// //       departureTime: flight.departure_time || 'N/A',\r\n// //       arrivalTime: flight.arrival_time || 'N/A',\r\n// //       duration: flight.duration || 'N/A',\r\n// //       stops: flight.stops || 0,\r\n// //       bookingUrl: this.generateBookingUrl(flight, params),\r\n// //       source: 'scraping'\r\n// //     }));\r\n// //   }\r\n\r\n// //   private generateBookingUrl(flight: any, params: FlightSearchParams): string {\r\n// //     // Generate booking URL based on airline\r\n// //     const airline = flight.airline?.toLowerCase();\r\n    \r\n// //     if (airline?.includes('indigo')) {\r\n// //       return `https://www.goindigo.in/booking/flight-select?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n// //     } else if (airline?.includes('air india')) {\r\n// //       return `https://www.airindia.in/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n// //     } else if (airline?.includes('spicejet')) {\r\n// //       return `https://www.spicejet.com/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n// //     }\r\n    \r\n// //     return this.generateSkyscannerUrl({ origin: params.origin, destination: params.destination, date: params.departureDate });\r\n// //   }\r\n\r\n// //   private generateSkyscannerUrl(params: any): string {\r\n// //     const origin = this.getAirportCode(params.origin || 'DEL');\r\n// //     const destination = this.getAirportCode(params.destination || 'BOM');\r\n// //     const date = params.date || new Date().toISOString().split('T')[0];\r\n    \r\n// //     return `https://www.skyscanner.co.in/transport/flights/${origin}/${destination}/${date.replace(/-/g, '')}/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy`;\r\n// //   }\r\n\r\n// //   private async getAirportCode(cityName: string): Promise<string> {\r\n// //   const airportCodes: { [key: string]: string } = {\r\n// //     'delhi': 'DEL',\r\n// //     'mumbai': 'BOM',\r\n// //     'bangalore': 'BLR',\r\n// //     'chennai': 'MAA',\r\n// //     'kolkata': 'CCU',\r\n// //     'hyderabad': 'HYD',\r\n// //     'pune': 'PNQ',\r\n// //     'ahmedabad': 'AMD',\r\n// //     'goa': 'GOI',\r\n// //     'kochi': 'COK',\r\n// //     'jaipur': 'JAI',\r\n// //     'lucknow': 'LKO',\r\n// //     'chandigarh': 'IXC',\r\n// //     'bhubaneswar': 'BBI',\r\n// //     'indore': 'IDR'\r\n// //   };\r\n\r\n// //   const normalizedCity = cityName.toLowerCase();\r\n\r\n// //   if (airportCodes[normalizedCity]) {\r\n// //     return airportCodes[normalizedCity];\r\n// //   }\r\n\r\n// //   // Use Gemini for unknown cities\r\n// //   try {\r\n// //     const response = await callGemini(\r\n// //       `Analyze the city name \"${cityName}\" and return ONLY its IATA airport code in uppercase. \r\n// //       Example responses: DEL, BOM, BLR. No other text.`,\r\n// //       { temperature: 0.1 } // Lower temperature for precise answers\r\n// //     );\r\n\r\n// //     const iataMatch = response.text.match(/[A-Z]{3}/);\r\n// //     if (iataMatch) {\r\n// //       return iataMatch[0];\r\n// //     }\r\n    \r\n// //     return normalizedCity.slice(0, 3).toUpperCase();\r\n    \r\n// //   } catch (error) {\r\n// //     console.error('Gemini IATA lookup failed:', error);\r\n// //     return 'XXX';\r\n// //   }\r\n// // }\r\n// // }\r\n\r\n// class FlightSearchService {\r\n//   private backendUrl = 'http://localhost:8000';\r\n\r\n//   async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\r\n//     console.log('🔍 Searching flights via backend:', params);\r\n\r\n//     try {\r\n//       // Only use backend - remove SerpAPI direct calls\r\n//       const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\r\n//         origin: params.origin,\r\n//         destination: params.destination,\r\n//         date: params.departureDate,\r\n//         passengers: params.passengers || 1,\r\n//         class: params.class || 'economy'\r\n//       }, {\r\n//         timeout: 15000\r\n//       });\r\n\r\n//       if (response.data.success && response.data.flight_results) {\r\n//         console.log('✅ Backend results found:', response.data.flight_results.length);\r\n//         return response.data.flight_results;\r\n//       } else {\r\n//         console.log('❌ Backend search failed:', response.data.error);\r\n//         return [];\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('❌ Flight search failed:', error);\r\n//       return [];\r\n//     }\r\n//   }\r\n\r\n// }\r\n\r\n// export const flightService = new FlightSearchService();\r\n// export type { FlightResult, FlightSearchParams };\r\n\r\nimport api from './api';\r\n\r\nexport interface FlightSearchRequest {\r\n  origin: string;\r\n  destination: string;\r\n  date: string;\r\n  passengers?: number;\r\n}\r\n\r\nexport interface FlightResult {\r\n  id: string;\r\n  airline: string;\r\n  price: string;\r\n  departure_time: string;\r\n  arrival_time: string;\r\n  duration: string;\r\n  stops: number;\r\n  bookingUrl: string;\r\n  source: string;\r\n}\r\n\r\nexport const searchFlights = async (request: FlightSearchRequest): Promise<FlightResult[]> => {\r\n  try {\r\n    const response = await api.post('/api/v1/flights/search', request);\r\n    \r\n    if (response.data.success) {\r\n      return response.data.flight_results || [];\r\n    } else {\r\n      throw new Error(response.data.error || 'Flight search failed');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Flight search error:', error);\r\n    throw new Error(error.response?.data?.error || error.message || 'Flight search failed');\r\n  }\r\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,OAAOA,GAAG,MAAM,OAAO;AAqBvB,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAA4B,IAA8B;EAC5F,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,wBAAwB,EAAEF,OAAO,CAAC;IAElE,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzB,OAAOH,QAAQ,CAACE,IAAI,CAACE,cAAc,IAAI,EAAE;IAC3C,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACI,KAAK,IAAI,sBAAsB,CAAC;IAChE;EACF,CAAC,CAAC,OAAOA,KAAU,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACnBC,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAID,KAAK,CAAC,EAAAE,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAIA,KAAK,CAACI,OAAO,IAAI,sBAAsB,CAAC;EACzF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}