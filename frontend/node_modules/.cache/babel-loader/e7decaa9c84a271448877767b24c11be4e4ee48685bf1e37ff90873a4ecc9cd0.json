{"ast":null,"code":"import axios from 'axios';\nimport { callGemini } from '../utils/gemini';\nclass FlightSearchService {\n  constructor() {\n    this.serpApiKey = \"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";\n    this.backendUrl = 'http://localhost:8000';\n  }\n  async searchFlights(params) {\n    console.log('üîç Searching flights with params:', params);\n\n    // Try SerpAPI first\n    if (this.serpApiKey) {\n      try {\n        const serpResults = await this.searchWithSerpAPI(params);\n        if (serpResults.length > 0) {\n          console.log('‚úÖ SerpAPI results found:', serpResults.length);\n          return serpResults;\n        } else {\n          console.warn('‚ö†Ô∏è SerpAPI failed:');\n        }\n      } catch (error) {\n        console.warn('‚ö†Ô∏è SerpAPI failed:', error);\n      }\n    } else {\n      console.warn('Problem with serpApi key');\n    }\n\n    // Try backend scraping\n    try {\n      const scrapingResults = await this.searchWithBackendScraping(params);\n      if (scrapingResults.length > 0) {\n        console.log('‚úÖ Backend scraping results found:', scrapingResults.length);\n        return scrapingResults;\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Backend scraping failed:', error);\n    }\n\n    // If all methods fail, return empty array (no fallback data)\n    console.log('‚ùå All flight search methods failed');\n    return [];\n  }\n  async searchWithSerpAPI(params) {\n    const serpParams = {\n      engine: 'google_flights',\n      departure_id: this.getAirportCode(params.origin),\n      arrival_id: this.getAirportCode(params.destination),\n      outbound_date: params.departureDate,\n      return_date: params.returnDate,\n      currency: 'INR',\n      hl: 'en',\n      api_key: this.serpApiKey\n    };\n    const response = await axios.get('https://serpapi.com/search', {\n      params: serpParams,\n      timeout: 10000\n    });\n    if (response.data.best_flights) {\n      return this.formatSerpAPIResults(response.data.best_flights);\n    }\n    return [];\n  }\n  async searchWithBackendScraping(params) {\n    const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\n      origin: params.origin,\n      destination: params.destination,\n      date: params.departureDate,\n      passengers: params.passengers || 1,\n      class: params.class || 'economy'\n    }, {\n      timeout: 15000\n    });\n    if (response.data.success && response.data.flight_results) {\n      return this.formatBackendResults(response.data.flight_results, params);\n    }\n    return [];\n  }\n  formatSerpAPIResults(flights) {\n    return flights.map((flight, index) => {\n      var _flight$flights$, _flight$flights$2, _flight$price, _flight$flights$3, _flight$flights$3$dep, _flight$flights$4, _flight$flights$4$arr, _flight$flights;\n      return {\n        id: `serp_${index}`,\n        airline: ((_flight$flights$ = flight.flights[0]) === null || _flight$flights$ === void 0 ? void 0 : _flight$flights$.airline) || 'Unknown',\n        flightNumber: ((_flight$flights$2 = flight.flights[0]) === null || _flight$flights$2 === void 0 ? void 0 : _flight$flights$2.flight_number) || 'N/A',\n        price: `‚Çπ${((_flight$price = flight.price) === null || _flight$price === void 0 ? void 0 : _flight$price.toLocaleString()) || 'N/A'}`,\n        departureTime: ((_flight$flights$3 = flight.flights[0]) === null || _flight$flights$3 === void 0 ? void 0 : (_flight$flights$3$dep = _flight$flights$3.departure_airport) === null || _flight$flights$3$dep === void 0 ? void 0 : _flight$flights$3$dep.time) || 'N/A',\n        arrivalTime: ((_flight$flights$4 = flight.flights[0]) === null || _flight$flights$4 === void 0 ? void 0 : (_flight$flights$4$arr = _flight$flights$4.arrival_airport) === null || _flight$flights$4$arr === void 0 ? void 0 : _flight$flights$4$arr.time) || 'N/A',\n        duration: flight.total_duration || 'N/A',\n        stops: ((_flight$flights = flight.flights) === null || _flight$flights === void 0 ? void 0 : _flight$flights.length) - 1 || 0,\n        bookingUrl: flight.booking_token ? `https://www.google.com/travel/flights/booking?token=${flight.booking_token}` : this.generateSkyscannerUrl(flight),\n        source: 'serpapi'\n      };\n    });\n  }\n  formatBackendResults(flights, params) {\n    return flights.map((flight, index) => ({\n      id: `backend_${index}`,\n      airline: flight.airline || 'Unknown',\n      flightNumber: flight.flight_number || 'N/A',\n      price: flight.price || 'N/A',\n      departureTime: flight.departure_time || 'N/A',\n      arrivalTime: flight.arrival_time || 'N/A',\n      duration: flight.duration || 'N/A',\n      stops: flight.stops || 0,\n      bookingUrl: this.generateBookingUrl(flight, params),\n      source: 'scraping'\n    }));\n  }\n  generateBookingUrl(flight, params) {\n    var _flight$airline;\n    // Generate booking URL based on airline\n    const airline = (_flight$airline = flight.airline) === null || _flight$airline === void 0 ? void 0 : _flight$airline.toLowerCase();\n    if (airline !== null && airline !== void 0 && airline.includes('indigo')) {\n      return `https://www.goindigo.in/booking/flight-select?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n    } else if (airline !== null && airline !== void 0 && airline.includes('air india')) {\n      return `https://www.airindia.in/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n    } else if (airline !== null && airline !== void 0 && airline.includes('spicejet')) {\n      return `https://www.spicejet.com/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\n    }\n    return this.generateSkyscannerUrl({\n      origin: params.origin,\n      destination: params.destination,\n      date: params.departureDate\n    });\n  }\n  generateSkyscannerUrl(params) {\n    const origin = this.getAirportCode(params.origin || 'DEL');\n    const destination = this.getAirportCode(params.destination || 'BOM');\n    const date = params.date || new Date().toISOString().split('T')[0];\n    return `https://www.skyscanner.co.in/transport/flights/${origin}/${destination}/${date.replace(/-/g, '')}/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy`;\n  }\n  async getAirportCode(cityName) {\n    const airportCodes = {\n      'delhi': 'DEL',\n      'mumbai': 'BOM',\n      'bangalore': 'BLR',\n      'chennai': 'MAA',\n      'kolkata': 'CCU',\n      'hyderabad': 'HYD',\n      'pune': 'PNQ',\n      'ahmedabad': 'AMD',\n      'goa': 'GOI',\n      'kochi': 'COK',\n      'jaipur': 'JAI',\n      'lucknow': 'LKO',\n      'chandigarh': 'IXC',\n      'bhubaneswar': 'BBI',\n      'indore': 'IDR'\n    };\n    const normalizedCity = cityName.toLowerCase();\n    if (airportCodes[normalizedCity]) {\n      return airportCodes[normalizedCity];\n    }\n\n    // Use Gemini for unknown cities\n    try {\n      const response = await callGemini(`Analyze the city name \"${cityName}\" and return ONLY its IATA airport code in uppercase. \n      Example responses: DEL, BOM, BLR. No other text.`, {\n        temperature: 0.1\n      } // Lower temperature for precise answers\n      );\n      const iataMatch = response.text.match(/[A-Z]{3}/);\n      if (iataMatch) {\n        return iataMatch[0];\n      }\n      return normalizedCity.slice(0, 3).toUpperCase();\n    } catch (error) {\n      console.error('Gemini IATA lookup failed:', error);\n      return 'XXX';\n    }\n  }\n}\nexport const flightService = new FlightSearchService();","map":{"version":3,"names":["axios","callGemini","FlightSearchService","constructor","serpApiKey","backendUrl","searchFlights","params","console","log","serpResults","searchWithSerpAPI","length","warn","error","scrapingResults","searchWithBackendScraping","serpParams","engine","departure_id","getAirportCode","origin","arrival_id","destination","outbound_date","departureDate","return_date","returnDate","currency","hl","api_key","response","get","timeout","data","best_flights","formatSerpAPIResults","post","date","passengers","class","success","flight_results","formatBackendResults","flights","map","flight","index","_flight$flights$","_flight$flights$2","_flight$price","_flight$flights$3","_flight$flights$3$dep","_flight$flights$4","_flight$flights$4$arr","_flight$flights","id","airline","flightNumber","flight_number","price","toLocaleString","departureTime","departure_airport","time","arrivalTime","arrival_airport","duration","total_duration","stops","bookingUrl","booking_token","generateSkyscannerUrl","source","departure_time","arrival_time","generateBookingUrl","_flight$airline","toLowerCase","includes","Date","toISOString","split","replace","cityName","airportCodes","normalizedCity","temperature","iataMatch","text","match","slice","toUpperCase","flightService"],"sources":["D:/Navikenz/pro/navihire/frontend/src/services/FlightService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { callGemini } from '../utils/gemini';\r\n\r\ninterface FlightSearchParams {\r\n  origin: string;\r\n  destination: string;\r\n  departureDate: string;\r\n  returnDate?: string;\r\n  passengers?: number;\r\n  class?: string;\r\n}\r\n\r\ninterface FlightResult {\r\n  id: string;\r\n  airline: string;\r\n  flightNumber: string;\r\n  price: string;\r\n  departureTime: string;\r\n  arrivalTime: string;\r\n  duration: string;\r\n  stops: number;\r\n  bookingUrl: string;\r\n  source: 'serpapi' | 'scraping' | 'fallback';\r\n}\r\n\r\nclass FlightSearchService {\r\n  private serpApiKey = \"0a9b0abe47e6107ce612664a0e582e40fc7cc91bdd1b42181cd56b2073c83fa0\";\r\n  private backendUrl = 'http://localhost:8000';\r\n\r\n  async searchFlights(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    console.log('üîç Searching flights with params:', params);\r\n\r\n    // Try SerpAPI first\r\n    if (this.serpApiKey) {\r\n      try {\r\n        const serpResults = await this.searchWithSerpAPI(params);\r\n        if (serpResults.length > 0) {\r\n          console.log('‚úÖ SerpAPI results found:', serpResults.length);\r\n          return serpResults;\r\n        }\r\n        else {console.warn('‚ö†Ô∏è SerpAPI failed:')}\r\n      } catch (error) {\r\n        console.warn('‚ö†Ô∏è SerpAPI failed:', error);\r\n      }\r\n    }\r\n    else {console.warn('Problem with serpApi key')}\r\n\r\n    // Try backend scraping\r\n    try {\r\n      const scrapingResults = await this.searchWithBackendScraping(params);\r\n      if (scrapingResults.length > 0) {\r\n        console.log('‚úÖ Backend scraping results found:', scrapingResults.length);\r\n        return scrapingResults;\r\n      }\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Backend scraping failed:', error);\r\n    }\r\n\r\n    // If all methods fail, return empty array (no fallback data)\r\n    console.log('‚ùå All flight search methods failed');\r\n    return [];\r\n  }\r\n\r\n  private async searchWithSerpAPI(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    const serpParams = {\r\n      engine: 'google_flights',\r\n      departure_id: this.getAirportCode(params.origin),\r\n      arrival_id: this.getAirportCode(params.destination),\r\n      outbound_date: params.departureDate,\r\n      return_date: params.returnDate,\r\n      currency: 'INR',\r\n      hl: 'en',\r\n      api_key: this.serpApiKey\r\n    };\r\n\r\n    const response = await axios.get('https://serpapi.com/search', {\r\n      params: serpParams,\r\n      timeout: 10000\r\n    });\r\n\r\n    if (response.data.best_flights) {\r\n      return this.formatSerpAPIResults(response.data.best_flights);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private async searchWithBackendScraping(params: FlightSearchParams): Promise<FlightResult[]> {\r\n    const response = await axios.post(`${this.backendUrl}/api/v1/flights/search`, {\r\n      origin: params.origin,\r\n      destination: params.destination,\r\n      date: params.departureDate,\r\n      passengers: params.passengers || 1,\r\n      class: params.class || 'economy'\r\n    }, {\r\n      timeout: 15000\r\n    });\r\n\r\n    if (response.data.success && response.data.flight_results) {\r\n      return this.formatBackendResults(response.data.flight_results, params);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private formatSerpAPIResults(flights: any[]): FlightResult[] {\r\n    return flights.map((flight, index) => ({\r\n      id: `serp_${index}`,\r\n      airline: flight.flights[0]?.airline || 'Unknown',\r\n      flightNumber: flight.flights[0]?.flight_number || 'N/A',\r\n      price: `‚Çπ${flight.price?.toLocaleString() || 'N/A'}`,\r\n      departureTime: flight.flights[0]?.departure_airport?.time || 'N/A',\r\n      arrivalTime: flight.flights[0]?.arrival_airport?.time || 'N/A',\r\n      duration: flight.total_duration || 'N/A',\r\n      stops: flight.flights?.length - 1 || 0,\r\n      bookingUrl: flight.booking_token ? \r\n        `https://www.google.com/travel/flights/booking?token=${flight.booking_token}` :\r\n        this.generateSkyscannerUrl(flight),\r\n      source: 'serpapi'\r\n    }));\r\n  }\r\n\r\n  private formatBackendResults(flights: any[], params: FlightSearchParams): FlightResult[] {\r\n    return flights.map((flight, index) => ({\r\n      id: `backend_${index}`,\r\n      airline: flight.airline || 'Unknown',\r\n      flightNumber: flight.flight_number || 'N/A',\r\n      price: flight.price || 'N/A',\r\n      departureTime: flight.departure_time || 'N/A',\r\n      arrivalTime: flight.arrival_time || 'N/A',\r\n      duration: flight.duration || 'N/A',\r\n      stops: flight.stops || 0,\r\n      bookingUrl: this.generateBookingUrl(flight, params),\r\n      source: 'scraping'\r\n    }));\r\n  }\r\n\r\n  private generateBookingUrl(flight: any, params: FlightSearchParams): string {\r\n    // Generate booking URL based on airline\r\n    const airline = flight.airline?.toLowerCase();\r\n    \r\n    if (airline?.includes('indigo')) {\r\n      return `https://www.goindigo.in/booking/flight-select?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    } else if (airline?.includes('air india')) {\r\n      return `https://www.airindia.in/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    } else if (airline?.includes('spicejet')) {\r\n      return `https://www.spicejet.com/booking?from=${params.origin}&to=${params.destination}&date=${params.departureDate}`;\r\n    }\r\n    \r\n    return this.generateSkyscannerUrl({ origin: params.origin, destination: params.destination, date: params.departureDate });\r\n  }\r\n\r\n  private generateSkyscannerUrl(params: any): string {\r\n    const origin = this.getAirportCode(params.origin || 'DEL');\r\n    const destination = this.getAirportCode(params.destination || 'BOM');\r\n    const date = params.date || new Date().toISOString().split('T')[0];\r\n    \r\n    return `https://www.skyscanner.co.in/transport/flights/${origin}/${destination}/${date.replace(/-/g, '')}/?adultsv2=1&children=0&adultsv2=1&childrenv2=&infants=0&cabinclass=economy`;\r\n  }\r\n\r\n  private async getAirportCode(cityName: string): Promise<string> {\r\n  const airportCodes: { [key: string]: string } = {\r\n    'delhi': 'DEL',\r\n    'mumbai': 'BOM',\r\n    'bangalore': 'BLR',\r\n    'chennai': 'MAA',\r\n    'kolkata': 'CCU',\r\n    'hyderabad': 'HYD',\r\n    'pune': 'PNQ',\r\n    'ahmedabad': 'AMD',\r\n    'goa': 'GOI',\r\n    'kochi': 'COK',\r\n    'jaipur': 'JAI',\r\n    'lucknow': 'LKO',\r\n    'chandigarh': 'IXC',\r\n    'bhubaneswar': 'BBI',\r\n    'indore': 'IDR'\r\n  };\r\n\r\n  const normalizedCity = cityName.toLowerCase();\r\n\r\n  if (airportCodes[normalizedCity]) {\r\n    return airportCodes[normalizedCity];\r\n  }\r\n\r\n  // Use Gemini for unknown cities\r\n  try {\r\n    const response = await callGemini(\r\n      `Analyze the city name \"${cityName}\" and return ONLY its IATA airport code in uppercase. \r\n      Example responses: DEL, BOM, BLR. No other text.`,\r\n      { temperature: 0.1 } // Lower temperature for precise answers\r\n    );\r\n\r\n    const iataMatch = response.text.match(/[A-Z]{3}/);\r\n    if (iataMatch) {\r\n      return iataMatch[0];\r\n    }\r\n    \r\n    return normalizedCity.slice(0, 3).toUpperCase();\r\n    \r\n  } catch (error) {\r\n    console.error('Gemini IATA lookup failed:', error);\r\n    return 'XXX';\r\n  }\r\n}\r\n}\r\n\r\nexport const flightService = new FlightSearchService();\r\nexport type { FlightResult, FlightSearchParams };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}