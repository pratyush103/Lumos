{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useWebSocket = url => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const sendMessage = useCallback(message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify({\n        message\n      }));\n    }\n  }, [socket]);\n  useEffect(() => {\n    const ws = new WebSocket(url);\n    ws.onopen = () => {\n      setIsConnected(true);\n      setSocket(ws);\n    };\n    ws.onclose = () => {\n      setIsConnected(false);\n      setSocket(null);\n    };\n    ws.onerror = () => {\n      setIsConnected(false);\n    };\n    return () => {\n      ws.close();\n    };\n  }, [url]);\n  return {\n    socket,\n    isConnected,\n    sendMessage\n  };\n};\n_s(useWebSocket, \"3d+UHpEj69M2HBrt1PS1J0RlU8Y=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useWebSocket","url","_s","socket","setSocket","isConnected","setIsConnected","sendMessage","message","readyState","WebSocket","OPEN","send","JSON","stringify","ws","onopen","onclose","onerror","close"],"sources":["D:/Navikenz/pro/navihire/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useWebSocket = (url: string) => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  const sendMessage = useCallback((message: string) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(JSON.stringify({ message }));\r\n    }\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(url);\r\n    \r\n    ws.onopen = () => {\r\n      setIsConnected(true);\r\n      setSocket(ws);\r\n    };\r\n    \r\n    ws.onclose = () => {\r\n      setIsConnected(false);\r\n      setSocket(null);\r\n    };\r\n    \r\n    ws.onerror = () => {\r\n      setIsConnected(false);\r\n    };\r\n\r\n    return () => {\r\n      ws.close();\r\n    };\r\n  }, [url]);\r\n\r\n  return { socket, isConnected, sendMessage };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,OAAO,MAAMC,YAAY,GAAIC,GAAW,IAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAmB,IAAI,CAAC;EAC5D,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMU,WAAW,GAAGR,WAAW,CAAES,OAAe,IAAK;IACnD,IAAIL,MAAM,IAAIA,MAAM,CAACM,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAClDR,MAAM,CAACS,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAAEN;MAAQ,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZL,SAAS,CAAC,MAAM;IACd,MAAMiB,EAAE,GAAG,IAAIL,SAAS,CAACT,GAAG,CAAC;IAE7Bc,EAAE,CAACC,MAAM,GAAG,MAAM;MAChBV,cAAc,CAAC,IAAI,CAAC;MACpBF,SAAS,CAACW,EAAE,CAAC;IACf,CAAC;IAEDA,EAAE,CAACE,OAAO,GAAG,MAAM;MACjBX,cAAc,CAAC,KAAK,CAAC;MACrBF,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC;IAEDW,EAAE,CAACG,OAAO,GAAG,MAAM;MACjBZ,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAED,OAAO,MAAM;MACXS,EAAE,CAACI,KAAK,CAAC,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,CAAClB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,MAAM;IAAEE,WAAW;IAAEE;EAAY,CAAC;AAC7C,CAAC;AAACL,EAAA,CAjCWF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}