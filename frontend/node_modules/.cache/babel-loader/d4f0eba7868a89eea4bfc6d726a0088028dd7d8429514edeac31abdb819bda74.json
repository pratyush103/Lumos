{"ast":null,"code":"var _jsxFileName = \"D:\\\\Navikenz\\\\pro\\\\navihire\\\\frontend\\\\src\\\\components\\\\ResumeUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResumeUpload = ({\n  socket,\n  sendMessage,\n  isConnected\n}) => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [results, setResults] = useState(null);\n  const [jobId, setJobId] = useState('');\n  const [dragOver, setDragOver] = useState(false);\n  const fileInputRef = useRef(null);\n  const generateFileId = () => `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  const handleFileChange = e => {\n    const selectedFiles = e.target.files;\n    if (selectedFiles) {\n      addFiles(Array.from(selectedFiles));\n    }\n  };\n  const addFiles = newFiles => {\n    const filesWithId = newFiles.map(file => ({\n      file,\n      id: generateFileId(),\n      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : undefined\n    }));\n    setFiles(prev => [...prev, ...filesWithId]);\n    setResults(null);\n    setMessage('');\n\n    // Reset file input to allow selecting the same file again\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const removeFile = fileId => {\n    setFiles(prev => {\n      const updatedFiles = prev.filter(f => f.id !== fileId);\n\n      // Clean up object URLs to prevent memory leaks\n      const removedFile = prev.find(f => f.id === fileId);\n      if (removedFile !== null && removedFile !== void 0 && removedFile.preview) {\n        URL.revokeObjectURL(removedFile.preview);\n      }\n      return updatedFiles;\n    });\n\n    // Clear results if no files remain\n    if (files.length === 1) {\n      setResults(null);\n      setMessage('');\n    }\n  };\n  const removeAllFiles = () => {\n    // Clean up all object URLs\n    files.forEach(fileWithId => {\n      if (fileWithId.preview) {\n        URL.revokeObjectURL(fileWithId.preview);\n      }\n    });\n    setFiles([]);\n    setResults(null);\n    setMessage('');\n\n    // Reset file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n  const handleDragLeave = e => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    setDragOver(false);\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    if (droppedFiles.length > 0) {\n      addFiles(droppedFiles);\n    }\n  };\n  const validateFiles = filesToValidate => {\n    const errors = [];\n    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    filesToValidate.forEach((fileWithId, index) => {\n      var _file$name$split$pop;\n      const file = fileWithId.file;\n      const fileExtension = '.' + ((_file$name$split$pop = file.name.split('.').pop()) === null || _file$name$split$pop === void 0 ? void 0 : _file$name$split$pop.toLowerCase());\n      if (!allowedTypes.includes(fileExtension)) {\n        errors.push(`File ${index + 1} (${file.name}): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.`);\n      }\n      if (file.size > maxSize) {\n        errors.push(`File ${index + 1} (${file.name}): File too large. Maximum size is 10MB.`);\n      }\n      if (file.size === 0) {\n        errors.push(`File ${index + 1} (${file.name}): File is empty.`);\n      }\n    });\n    return errors;\n  };\n  const handleUpload = async () => {\n    if (!files || files.length === 0) {\n      setMessage('Please select files to upload');\n      return;\n    }\n\n    // Validate files\n    const validationErrors = validateFiles(files);\n    if (validationErrors.length > 0) {\n      setMessage(`Validation errors:\\n${validationErrors.join('\\n')}`);\n      return;\n    }\n    setUploading(true);\n    setMessage('');\n    setResults(null);\n    try {\n      console.log(`📤 Starting upload of ${files.length} files`);\n\n      // Create FormData for file upload\n      const formData = new FormData();\n      files.forEach(fileWithId => {\n        formData.append('files', fileWithId.file);\n      });\n\n      // Add job ID if provided\n      if (jobId.trim()) {\n        formData.append('job_id', jobId.trim());\n      }\n\n      // Send WebSocket message about upload start\n      if (isConnected && sendMessage) {\n        sendMessage(`Starting AI analysis of ${files.length} resume(s)${jobId ? ` for job ${jobId}` : ''}`);\n      }\n      console.log('📡 Sending files to backend...');\n\n      // Upload and process files\n      const response = await api.post('/api/v1/resumes/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 120000 // 2 minutes timeout for large files\n      });\n      console.log('✅ Upload response:', response.data);\n      if (response.data.success) {\n        const uploadResults = {\n          totalUploaded: response.data.total_uploaded,\n          totalProcessed: response.data.total_processed,\n          failedCount: response.data.failed_count,\n          processedResumes: response.data.processed_resumes || [],\n          failedResumes: response.data.failed_resumes || [],\n          matchingResults: response.data.matching_results\n        };\n        setResults(uploadResults);\n\n        // Success message\n        let successMsg = `Successfully processed ${uploadResults.totalProcessed} out of ${uploadResults.totalUploaded} resume(s)`;\n        if (uploadResults.failedCount > 0) {\n          successMsg += `. ${uploadResults.failedCount} file(s) failed to process.`;\n        }\n        setMessage(successMsg);\n\n        // Send WebSocket message about completion\n        if (isConnected && sendMessage) {\n          sendMessage(`AI analysis complete: ${uploadResults.totalProcessed} resumes processed successfully${uploadResults.matchingResults ? ` with job matching results` : ''}`);\n        }\n\n        // Clear files after successful upload\n        removeAllFiles();\n      } else {\n        throw new Error(response.data.error || 'Upload failed');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('❌ Upload failed:', error);\n      let errorMessage = 'Upload failed: ';\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.detail) {\n        errorMessage += error.response.data.detail;\n      } else if (error.message) {\n        errorMessage += error.message;\n      } else {\n        errorMessage += 'Unknown error occurred';\n      }\n      setMessage(errorMessage);\n\n      // Send WebSocket message about failure\n      if (isConnected && sendMessage) {\n        sendMessage(`Resume upload failed: ${errorMessage}`);\n      }\n    } finally {\n      setUploading(false);\n    }\n  };\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  const getScoreColor = score => {\n    if (score >= 80) return '#10b981'; // Green\n    if (score >= 60) return '#f59e0b'; // Yellow\n    if (score >= 40) return '#ef4444'; // Red\n    return '#6b7280'; // Gray\n  };\n  const getFileIcon = fileName => {\n    var _fileName$split$pop;\n    const extension = (_fileName$split$pop = fileName.split('.').pop()) === null || _fileName$split$pop === void 0 ? void 0 : _fileName$split$pop.toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'txt':\n        return '📃';\n      default:\n        return '📄';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"resume-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCC4 Resume Upload & AI Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload resumes for intelligent parsing, scoring, and candidate matching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"jobId\",\n        children: \"Job ID (Optional):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"jobId\",\n        type: \"text\",\n        placeholder: \"Enter Job ID for candidate matching\",\n        value: jobId,\n        onChange: e => setJobId(e.target.value),\n        disabled: uploading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"If provided, candidates will be automatically matched to this job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `upload-area ${dragOver ? 'drag-over' : ''}`,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n      onClick: () => {\n        var _fileInputRef$current;\n        return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-icon\",\n        children: \"\\uD83D\\uDCC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Drag & Drop Resumes Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Or click to select files (PDF, DOC, DOCX, TXT)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"file-limits\",\n        children: \"Maximum 10MB per file \\u2022 Up to 20 files at once\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: fileInputRef,\n        type: \"file\",\n        multiple: true,\n        accept: \".pdf,.doc,.docx,.txt\",\n        onChange: handleFileChange,\n        disabled: uploading,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-files\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"\\uD83D\\uDCCB Selected Files (\", files.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-remove-all\",\n          onClick: removeAllFiles,\n          disabled: uploading,\n          title: \"Remove all files\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Remove All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files-list\",\n        children: files.map(fileWithId => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-icon\",\n            children: getFileIcon(fileWithId.file.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"file-name\",\n              children: fileWithId.file.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-meta\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-size\",\n                children: formatFileSize(fileWithId.file.size)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-type\",\n                children: fileWithId.file.type || 'Unknown'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-remove-file\",\n            onClick: () => removeFile(fileWithId.id),\n            disabled: uploading,\n            title: `Remove ${fileWithId.file.name}`,\n            children: \"\\u274C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this)]\n        }, fileWithId.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary upload-btn\",\n        onClick: handleUpload,\n        disabled: uploading || !files || files.length === 0,\n        children: uploading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), \"Processing \", (files === null || files === void 0 ? void 0 : files.length) || 0, \" file(s)...\"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"\\uD83D\\uDE80 Upload & Analyze with AI\"\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert ${message.includes('Success') || message.includes('processed') ? 'alert-success' : 'alert-error'}`,\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Processing Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Total Uploaded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number\",\n            children: results.totalUploaded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Successfully Processed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number success\",\n            children: results.totalProcessed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Failed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-number error\",\n            children: results.failedCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this), results.processedResumes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-resumes\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\u2705 Successfully Processed Candidates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"candidates-grid\",\n          children: results.processedResumes.map((resume, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"candidate-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"candidate-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: resume.candidate_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"score-badge\",\n                style: {\n                  backgroundColor: getScoreColor(resume.score)\n                },\n                children: [resume.score.toFixed(1), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"candidate-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Email:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 26\n                }, this), \" \", resume.email || 'Not provided']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Skills:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 26\n                }, this), \" \", resume.skills_count, \" identified\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Experience:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 443,\n                  columnNumber: 26\n                }, this), \" \", resume.experience_years, \" years\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"File:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 26\n                }, this), \" \", resume.filename]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }, this), results.failedResumes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"failed-resumes\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\u274C Failed to Process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"failed-list\",\n          children: results.failedResumes.map((failed, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"failed-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"failed-filename\",\n              children: failed.filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"failed-error\",\n              children: failed.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(ResumeUpload, \"e8Sde1+ybsQFB9eHpOVZLmXIfv4=\");\n_c = ResumeUpload;\nexport default ResumeUpload;\nvar _c;\n$RefreshReg$(_c, \"ResumeUpload\");","map":{"version":3,"names":["React","useState","useRef","api","jsxDEV","_jsxDEV","Fragment","_Fragment","ResumeUpload","socket","sendMessage","isConnected","_s","files","setFiles","uploading","setUploading","message","setMessage","results","setResults","jobId","setJobId","dragOver","setDragOver","fileInputRef","generateFileId","Date","now","Math","random","toString","substr","handleFileChange","e","selectedFiles","target","addFiles","Array","from","newFiles","filesWithId","map","file","id","preview","type","startsWith","URL","createObjectURL","undefined","prev","current","value","removeFile","fileId","updatedFiles","filter","f","removedFile","find","revokeObjectURL","length","removeAllFiles","forEach","fileWithId","handleDragOver","preventDefault","handleDragLeave","handleDrop","droppedFiles","dataTransfer","validateFiles","filesToValidate","errors","allowedTypes","maxSize","index","_file$name$split$pop","fileExtension","name","split","pop","toLowerCase","includes","push","size","handleUpload","validationErrors","join","console","log","formData","FormData","append","trim","response","post","headers","timeout","data","success","uploadResults","totalUploaded","total_uploaded","totalProcessed","total_processed","failedCount","failed_count","processedResumes","processed_resumes","failedResumes","failed_resumes","matchingResults","matching_results","successMsg","Error","error","_error$response","_error$response$data","errorMessage","detail","formatFileSize","bytes","k","sizes","i","floor","parseFloat","pow","toFixed","getScoreColor","score","getFileIcon","fileName","_fileName$split$pop","extension","className","children","_jsxFileName","lineNumber","columnNumber","htmlFor","placeholder","onChange","disabled","onDragOver","onDragLeave","onDrop","onClick","_fileInputRef$current","click","ref","multiple","accept","style","display","title","resume","candidate_name","backgroundColor","email","skills_count","experience_years","filename","failed","_c","$RefreshReg$"],"sources":["D:/Navikenz/pro/navihire/frontend/src/components/ResumeUpload.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport api from '../services/api';\r\n\r\ninterface ResumeUploadProps {\r\n  socket: WebSocket | null;\r\n  sendMessage: (message: string) => void;\r\n  isConnected: boolean;\r\n}\r\n\r\ninterface FileWithId {\r\n  file: File;\r\n  id: string;\r\n  preview?: string;\r\n}\r\n\r\ninterface ProcessedResume {\r\n  candidate_id: number;\r\n  filename: string;\r\n  candidate_name: string;\r\n  email: string;\r\n  status: string;\r\n  score: number;\r\n  skills_count: number;\r\n  experience_years: number;\r\n}\r\n\r\ninterface FailedResume {\r\n  filename: string;\r\n  error: string;\r\n  error_type: string;\r\n}\r\n\r\ninterface UploadResults {\r\n  totalUploaded: number;\r\n  totalProcessed: number;\r\n  failedCount: number;\r\n  processedResumes: ProcessedResume[];\r\n  failedResumes: FailedResume[];\r\n  matchingResults?: any;\r\n}\r\n\r\nconst ResumeUpload: React.FC<ResumeUploadProps> = ({ socket, sendMessage, isConnected }) => {\r\n  const [files, setFiles] = useState<FileWithId[]>([]);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [results, setResults] = useState<UploadResults | null>(null);\r\n  const [jobId, setJobId] = useState<string>('');\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const generateFileId = () => `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles) {\r\n      addFiles(Array.from(selectedFiles));\r\n    }\r\n  };\r\n\r\n  const addFiles = (newFiles: File[]) => {\r\n    const filesWithId: FileWithId[] = newFiles.map(file => ({\r\n      file,\r\n      id: generateFileId(),\r\n      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : undefined\r\n    }));\r\n    \r\n    setFiles(prev => [...prev, ...filesWithId]);\r\n    setResults(null);\r\n    setMessage('');\r\n    \r\n    // Reset file input to allow selecting the same file again\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const removeFile = (fileId: string) => {\r\n    setFiles(prev => {\r\n      const updatedFiles = prev.filter(f => f.id !== fileId);\r\n      \r\n      // Clean up object URLs to prevent memory leaks\r\n      const removedFile = prev.find(f => f.id === fileId);\r\n      if (removedFile?.preview) {\r\n        URL.revokeObjectURL(removedFile.preview);\r\n      }\r\n      \r\n      return updatedFiles;\r\n    });\r\n    \r\n    // Clear results if no files remain\r\n    if (files.length === 1) {\r\n      setResults(null);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const removeAllFiles = () => {\r\n    // Clean up all object URLs\r\n    files.forEach(fileWithId => {\r\n      if (fileWithId.preview) {\r\n        URL.revokeObjectURL(fileWithId.preview);\r\n      }\r\n    });\r\n    \r\n    setFiles([]);\r\n    setResults(null);\r\n    setMessage('');\r\n    \r\n    // Reset file input\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n    \r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    if (droppedFiles.length > 0) {\r\n      addFiles(droppedFiles);\r\n    }\r\n  };\r\n\r\n  const validateFiles = (filesToValidate: FileWithId[]): string[] => {\r\n    const errors: string[] = [];\r\n    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n\r\n    filesToValidate.forEach((fileWithId, index) => {\r\n      const file = fileWithId.file;\r\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n      \r\n      if (!allowedTypes.includes(fileExtension)) {\r\n        errors.push(`File ${index + 1} (${file.name}): Unsupported file type. Please use PDF, DOC, DOCX, or TXT files.`);\r\n      }\r\n      \r\n      if (file.size > maxSize) {\r\n        errors.push(`File ${index + 1} (${file.name}): File too large. Maximum size is 10MB.`);\r\n      }\r\n      \r\n      if (file.size === 0) {\r\n        errors.push(`File ${index + 1} (${file.name}): File is empty.`);\r\n      }\r\n    });\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!files || files.length === 0) {\r\n      setMessage('Please select files to upload');\r\n      return;\r\n    }\r\n\r\n    // Validate files\r\n    const validationErrors = validateFiles(files);\r\n    if (validationErrors.length > 0) {\r\n      setMessage(`Validation errors:\\n${validationErrors.join('\\n')}`);\r\n      return;\r\n    }\r\n\r\n    setUploading(true);\r\n    setMessage('');\r\n    setResults(null);\r\n\r\n    try {\r\n      console.log(`📤 Starting upload of ${files.length} files`);\r\n      \r\n      // Create FormData for file upload\r\n      const formData = new FormData();\r\n      files.forEach(fileWithId => {\r\n        formData.append('files', fileWithId.file);\r\n      });\r\n      \r\n      // Add job ID if provided\r\n      if (jobId.trim()) {\r\n        formData.append('job_id', jobId.trim());\r\n      }\r\n\r\n      // Send WebSocket message about upload start\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Starting AI analysis of ${files.length} resume(s)${jobId ? ` for job ${jobId}` : ''}`);\r\n      }\r\n\r\n      console.log('📡 Sending files to backend...');\r\n      \r\n      // Upload and process files\r\n      const response = await api.post('/api/v1/resumes/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        timeout: 120000 // 2 minutes timeout for large files\r\n      });\r\n\r\n      console.log('✅ Upload response:', response.data);\r\n\r\n      if (response.data.success) {\r\n        const uploadResults: UploadResults = {\r\n          totalUploaded: response.data.total_uploaded,\r\n          totalProcessed: response.data.total_processed,\r\n          failedCount: response.data.failed_count,\r\n          processedResumes: response.data.processed_resumes || [],\r\n          failedResumes: response.data.failed_resumes || [],\r\n          matchingResults: response.data.matching_results\r\n        };\r\n\r\n        setResults(uploadResults);\r\n        \r\n        // Success message\r\n        let successMsg = `Successfully processed ${uploadResults.totalProcessed} out of ${uploadResults.totalUploaded} resume(s)`;\r\n        if (uploadResults.failedCount > 0) {\r\n          successMsg += `. ${uploadResults.failedCount} file(s) failed to process.`;\r\n        }\r\n        setMessage(successMsg);\r\n\r\n        // Send WebSocket message about completion\r\n        if (isConnected && sendMessage) {\r\n          sendMessage(`AI analysis complete: ${uploadResults.totalProcessed} resumes processed successfully${uploadResults.matchingResults ? ` with job matching results` : ''}`);\r\n        }\r\n\r\n        // Clear files after successful upload\r\n        removeAllFiles();\r\n        \r\n      } else {\r\n        throw new Error(response.data.error || 'Upload failed');\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('❌ Upload failed:', error);\r\n      \r\n      let errorMessage = 'Upload failed: ';\r\n      if (error.response?.data?.detail) {\r\n        errorMessage += error.response.data.detail;\r\n      } else if (error.message) {\r\n        errorMessage += error.message;\r\n      } else {\r\n        errorMessage += 'Unknown error occurred';\r\n      }\r\n      \r\n      setMessage(errorMessage);\r\n\r\n      // Send WebSocket message about failure\r\n      if (isConnected && sendMessage) {\r\n        sendMessage(`Resume upload failed: ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number): string => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const getScoreColor = (score: number): string => {\r\n    if (score >= 80) return '#10b981'; // Green\r\n    if (score >= 60) return '#f59e0b'; // Yellow\r\n    if (score >= 40) return '#ef4444'; // Red\r\n    return '#6b7280'; // Gray\r\n  };\r\n\r\n  const getFileIcon = (fileName: string): string => {\r\n    const extension = fileName.split('.').pop()?.toLowerCase();\r\n    switch (extension) {\r\n      case 'pdf': return '📄';\r\n      case 'doc':\r\n      case 'docx': return '📝';\r\n      case 'txt': return '📃';\r\n      default: return '📄';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"resume-upload\">\r\n      <div className=\"page-header\">\r\n        <h2>📄 Resume Upload & AI Analysis</h2>\r\n        <p>Upload resumes for intelligent parsing, scoring, and candidate matching</p>\r\n      </div>\r\n\r\n      {/* Job ID Input */}\r\n      <div className=\"job-selection\">\r\n        <label htmlFor=\"jobId\">Job ID (Optional):</label>\r\n        <input\r\n          id=\"jobId\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Job ID for candidate matching\"\r\n          value={jobId}\r\n          onChange={(e) => setJobId(e.target.value)}\r\n          disabled={uploading}\r\n        />\r\n        <small>If provided, candidates will be automatically matched to this job</small>\r\n      </div>\r\n\r\n      {/* Upload Area */}\r\n      <div \r\n        className={`upload-area ${dragOver ? 'drag-over' : ''}`}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n        onClick={() => fileInputRef.current?.click()}\r\n      >\r\n        <div className=\"upload-icon\">📄</div>\r\n        <h3>Drag & Drop Resumes Here</h3>\r\n        <p>Or click to select files (PDF, DOC, DOCX, TXT)</p>\r\n        <p className=\"file-limits\">Maximum 10MB per file • Up to 20 files at once</p>\r\n        <input \r\n          ref={fileInputRef}\r\n          type=\"file\" \r\n          multiple \r\n          accept=\".pdf,.doc,.docx,.txt\"\r\n          onChange={handleFileChange}\r\n          disabled={uploading}\r\n          style={{ display: 'none' }}\r\n        />\r\n      </div>\r\n\r\n      {/* Selected Files Display with Remove Options */}\r\n      {files.length > 0 && (\r\n        <div className=\"selected-files\">\r\n          <div className=\"files-header\">\r\n            <h4>📋 Selected Files ({files.length})</h4>\r\n            <button \r\n              className=\"btn-remove-all\"\r\n              onClick={removeAllFiles}\r\n              disabled={uploading}\r\n              title=\"Remove all files\"\r\n            >\r\n              🗑️ Remove All\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"files-list\">\r\n            {files.map((fileWithId) => (\r\n              <div key={fileWithId.id} className=\"file-item\">\r\n                <div className=\"file-icon\">\r\n                  {getFileIcon(fileWithId.file.name)}\r\n                </div>\r\n                \r\n                <div className=\"file-details\">\r\n                  <span className=\"file-name\">{fileWithId.file.name}</span>\r\n                  <div className=\"file-meta\">\r\n                    <span className=\"file-size\">{formatFileSize(fileWithId.file.size)}</span>\r\n                    <span className=\"file-type\">{fileWithId.file.type || 'Unknown'}</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <button \r\n                  className=\"btn-remove-file\"\r\n                  onClick={() => removeFile(fileWithId.id)}\r\n                  disabled={uploading}\r\n                  title={`Remove ${fileWithId.file.name}`}\r\n                >\r\n                  ❌\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Upload Button */}\r\n      <div className=\"upload-actions\">\r\n        <button \r\n          className=\"btn-primary upload-btn\" \r\n          onClick={handleUpload}\r\n          disabled={uploading || !files || files.length === 0}\r\n        >\r\n          {uploading ? (\r\n            <>\r\n              <span className=\"spinner\"></span>\r\n              Processing {files?.length || 0} file(s)...\r\n            </>\r\n          ) : (\r\n            <>\r\n              🚀 Upload & Analyze with AI\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status Message */}\r\n      {message && (\r\n        <div className={`alert ${message.includes('Success') || message.includes('processed') ? 'alert-success' : 'alert-error'}`}>\r\n          <pre>{message}</pre>\r\n        </div>\r\n      )}\r\n\r\n      {/* Processing Results */}\r\n      {results && (\r\n        <div className=\"processing-results\">\r\n          <h3>📊 Processing Results</h3>\r\n          \r\n          {/* Summary Stats */}\r\n          <div className=\"results-summary\">\r\n            <div className=\"stat-card\">\r\n              <h4>Total Uploaded</h4>\r\n              <span className=\"stat-number\">{results.totalUploaded}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Successfully Processed</h4>\r\n              <span className=\"stat-number success\">{results.totalProcessed}</span>\r\n            </div>\r\n            <div className=\"stat-card\">\r\n              <h4>Failed</h4>\r\n              <span className=\"stat-number error\">{results.failedCount}</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Processed Resumes */}\r\n          {results.processedResumes.length > 0 && (\r\n            <div className=\"processed-resumes\">\r\n              <h4>✅ Successfully Processed Candidates</h4>\r\n              <div className=\"candidates-grid\">\r\n                {results.processedResumes.map((resume, index) => (\r\n                  <div key={index} className=\"candidate-card\">\r\n                    <div className=\"candidate-header\">\r\n                      <h5>{resume.candidate_name}</h5>\r\n                      <span \r\n                        className=\"score-badge\"\r\n                        style={{ backgroundColor: getScoreColor(resume.score) }}\r\n                      >\r\n                        {resume.score.toFixed(1)}%\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"candidate-details\">\r\n                      <p><strong>Email:</strong> {resume.email || 'Not provided'}</p>\r\n                      <p><strong>Skills:</strong> {resume.skills_count} identified</p>\r\n                      <p><strong>Experience:</strong> {resume.experience_years} years</p>\r\n                      <p><strong>File:</strong> {resume.filename}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Failed Resumes */}\r\n          {results.failedResumes.length > 0 && (\r\n            <div className=\"failed-resumes\">\r\n              <h4>❌ Failed to Process</h4>\r\n              <div className=\"failed-list\">\r\n                {results.failedResumes.map((failed, index) => (\r\n                  <div key={index} className=\"failed-item\">\r\n                    <span className=\"failed-filename\">{failed.filename}</span>\r\n                    <span className=\"failed-error\">{failed.error}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResumeUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}