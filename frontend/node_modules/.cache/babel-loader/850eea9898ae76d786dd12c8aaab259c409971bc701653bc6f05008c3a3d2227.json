{"ast":null,"code":"import{useState,useEffect,useRef,useCallback}from'react';export const useWebSocket=userId=>{const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[connectionStatus,setConnectionStatus]=useState('disconnected');const[messages,setMessages]=useState([]);const[lastActivity,setLastActivity]=useState(null);const reconnectTimeoutRef=useRef();const heartbeatIntervalRef=useRef();const reconnectAttemptsRef=useRef(0);const maxReconnectAttempts=5;const reconnectDelay=3000;// 3 seconds\nconst heartbeatInterval=30000;// 30 seconds\nconst idleTimeout=300000;// 5 minutes\nconst wsUrl=\"\".concat(process.env.REACT_APP_WS_URL||'ws://localhost:8000',\"/ws/chat/\").concat(userId);const connect=useCallback(()=>{if((socket===null||socket===void 0?void 0:socket.readyState)===WebSocket.OPEN){return;}setConnectionStatus('connecting');console.log('üîå Connecting to WebSocket...');try{const newSocket=new WebSocket(wsUrl);newSocket.onopen=()=>{console.log('‚úÖ WebSocket connected');setSocket(newSocket);setIsConnected(true);setConnectionStatus('connected');setLastActivity(new Date());reconnectAttemptsRef.current=0;// Start heartbeat\nstartHeartbeat(newSocket);};newSocket.onmessage=event=>{try{const data=JSON.parse(event.data);setMessages(prev=>[...prev,data]);setLastActivity(new Date());console.log('üì® Message received:',data);}catch(error){console.error('Error parsing WebSocket message:',error);}};newSocket.onclose=event=>{console.log('üîå WebSocket disconnected:',event.code,event.reason);setSocket(null);setIsConnected(false);setConnectionStatus('disconnected');// Clear heartbeat\nif(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}// Attempt reconnection if not a manual close\nif(event.code!==1000&&reconnectAttemptsRef.current<maxReconnectAttempts){scheduleReconnect();}};newSocket.onerror=error=>{console.error('‚ùå WebSocket error:',error);setConnectionStatus('disconnected');};}catch(error){console.error('‚ùå Failed to create WebSocket:',error);setConnectionStatus('disconnected');scheduleReconnect();}},[wsUrl,socket]);const scheduleReconnect=useCallback(()=>{if(reconnectAttemptsRef.current>=maxReconnectAttempts){console.log('‚ùå Max reconnection attempts reached');setConnectionStatus('disconnected');return;}reconnectAttemptsRef.current++;setConnectionStatus('reconnecting');console.log(\"\\uD83D\\uDD04 Scheduling reconnect attempt \".concat(reconnectAttemptsRef.current,\"/\").concat(maxReconnectAttempts,\" in \").concat(reconnectDelay,\"ms\"));reconnectTimeoutRef.current=setTimeout(()=>{connect();},reconnectDelay*reconnectAttemptsRef.current);// Exponential backoff\n},[connect]);const startHeartbeat=useCallback(ws=>{heartbeatIntervalRef.current=setInterval(()=>{if(ws.readyState===WebSocket.OPEN){// Send ping message\nws.send(JSON.stringify({type:'ping',timestamp:Date.now()}));console.log('üíì Heartbeat sent');// Check for idle timeout\nconst now=new Date();if(lastActivity&&now.getTime()-lastActivity.getTime()>idleTimeout){console.log('‚è∞ Connection idle for too long, refreshing...');ws.close(1000,'Idle timeout');connect();}}},heartbeatInterval);},[lastActivity,connect]);const sendMessage=useCallback(message=>{if((socket===null||socket===void 0?void 0:socket.readyState)===WebSocket.OPEN){const messageData={message,timestamp:Date.now(),userId};socket.send(JSON.stringify(messageData));setLastActivity(new Date());console.log('üì§ Message sent:',message);}else{console.warn('‚ö†Ô∏è WebSocket not connected, attempting to reconnect...');connect();}},[socket,userId,connect]);const reconnect=useCallback(()=>{console.log('üîÑ Manual reconnection triggered');reconnectAttemptsRef.current=0;// Close existing connection\nif(socket){socket.close(1000,'Manual reconnect');}// Clear timeouts\nif(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}// Reconnect\nsetTimeout(connect,100);},[socket,connect]);// Initialize connection\nuseEffect(()=>{connect();// Cleanup on unmount\nreturn()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}if(socket){socket.close(1000,'Component unmount');}};},[]);// Handle page visibility changes\nuseEffect(()=>{const handleVisibilityChange=()=>{if(document.visibilityState==='visible'&&!isConnected){console.log('üëÅÔ∏è Page became visible, checking connection...');reconnect();}};document.addEventListener('visibilitychange',handleVisibilityChange);return()=>document.removeEventListener('visibilitychange',handleVisibilityChange);},[isConnected,reconnect]);// Handle online/offline events\nuseEffect(()=>{const handleOnline=()=>{console.log('üåê Network back online, reconnecting...');reconnect();};const handleOffline=()=>{console.log('üìµ Network offline');setConnectionStatus('disconnected');};window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[reconnect]);return{socket,isConnected,connectionStatus,sendMessage,messages,reconnect,lastActivity};};","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","userId","socket","setSocket","isConnected","setIsConnected","connectionStatus","setConnectionStatus","messages","setMessages","lastActivity","setLastActivity","reconnectTimeoutRef","heartbeatIntervalRef","reconnectAttemptsRef","maxReconnectAttempts","reconnectDelay","heartbeatInterval","idleTimeout","wsUrl","concat","process","env","REACT_APP_WS_URL","connect","readyState","WebSocket","OPEN","console","log","newSocket","onopen","Date","current","startHeartbeat","onmessage","event","data","JSON","parse","prev","error","onclose","code","reason","clearInterval","scheduleReconnect","onerror","setTimeout","ws","setInterval","send","stringify","type","timestamp","now","getTime","close","sendMessage","message","messageData","warn","reconnect","clearTimeout","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","handleOnline","handleOffline","window"],"sources":["D:/Navikenz/pro/navihire/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\ninterface WebSocketMessage {\r\n  type: string;\r\n  content: string;\r\n  agent?: string;\r\n  task_progress?: any;\r\n}\r\n\r\ninterface UseWebSocketReturn {\r\n  socket: WebSocket | null;\r\n  isConnected: boolean;\r\n  connectionStatus: 'connecting' | 'connected' | 'disconnected' | 'reconnecting';\r\n  sendMessage: (message: string) => void;\r\n  messages: WebSocketMessage[];\r\n  reconnect: () => void;\r\n  lastActivity: Date | null;\r\n}\r\n\r\nexport const useWebSocket = (userId: string): UseWebSocketReturn => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'reconnecting'>('disconnected');\r\n  const [messages, setMessages] = useState<WebSocketMessage[]>([]);\r\n  const [lastActivity, setLastActivity] = useState<Date | null>(null);\r\n  \r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const heartbeatIntervalRef = useRef<NodeJS.Timeout>();\r\n  const reconnectAttemptsRef = useRef(0);\r\n  const maxReconnectAttempts = 5;\r\n  const reconnectDelay = 3000; // 3 seconds\r\n  const heartbeatInterval = 30000; // 30 seconds\r\n  const idleTimeout = 300000; // 5 minutes\r\n\r\n  const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:8000'}/ws/chat/${userId}`;\r\n\r\n  const connect = useCallback(() => {\r\n    if (socket?.readyState === WebSocket.OPEN) {\r\n      return;\r\n    }\r\n\r\n    setConnectionStatus('connecting');\r\n    console.log('üîå Connecting to WebSocket...');\r\n\r\n    try {\r\n      const newSocket = new WebSocket(wsUrl);\r\n\r\n      newSocket.onopen = () => {\r\n        console.log('‚úÖ WebSocket connected');\r\n        setSocket(newSocket);\r\n        setIsConnected(true);\r\n        setConnectionStatus('connected');\r\n        setLastActivity(new Date());\r\n        reconnectAttemptsRef.current = 0;\r\n        \r\n        // Start heartbeat\r\n        startHeartbeat(newSocket);\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          setMessages(prev => [...prev, data]);\r\n          setLastActivity(new Date());\r\n          console.log('üì® Message received:', data);\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = (event) => {\r\n        console.log('üîå WebSocket disconnected:', event.code, event.reason);\r\n        setSocket(null);\r\n        setIsConnected(false);\r\n        setConnectionStatus('disconnected');\r\n        \r\n        // Clear heartbeat\r\n        if (heartbeatIntervalRef.current) {\r\n          clearInterval(heartbeatIntervalRef.current);\r\n        }\r\n\r\n        // Attempt reconnection if not a manual close\r\n        if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\r\n          scheduleReconnect();\r\n        }\r\n      };\r\n\r\n      newSocket.onerror = (error) => {\r\n        console.error('‚ùå WebSocket error:', error);\r\n        setConnectionStatus('disconnected');\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to create WebSocket:', error);\r\n      setConnectionStatus('disconnected');\r\n      scheduleReconnect();\r\n    }\r\n  }, [wsUrl, socket]);\r\n\r\n  const scheduleReconnect = useCallback(() => {\r\n    if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\r\n      console.log('‚ùå Max reconnection attempts reached');\r\n      setConnectionStatus('disconnected');\r\n      return;\r\n    }\r\n\r\n    reconnectAttemptsRef.current++;\r\n    setConnectionStatus('reconnecting');\r\n    \r\n    console.log(`üîÑ Scheduling reconnect attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts} in ${reconnectDelay}ms`);\r\n    \r\n    reconnectTimeoutRef.current = setTimeout(() => {\r\n      connect();\r\n    }, reconnectDelay * reconnectAttemptsRef.current); // Exponential backoff\r\n  }, [connect]);\r\n\r\n  const startHeartbeat = useCallback((ws: WebSocket) => {\r\n    heartbeatIntervalRef.current = setInterval(() => {\r\n      if (ws.readyState === WebSocket.OPEN) {\r\n        // Send ping message\r\n        ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));\r\n        console.log('üíì Heartbeat sent');\r\n        \r\n        // Check for idle timeout\r\n        const now = new Date();\r\n        if (lastActivity && (now.getTime() - lastActivity.getTime()) > idleTimeout) {\r\n          console.log('‚è∞ Connection idle for too long, refreshing...');\r\n          ws.close(1000, 'Idle timeout');\r\n          connect();\r\n        }\r\n      }\r\n    }, heartbeatInterval);\r\n  }, [lastActivity, connect]);\r\n\r\n  const sendMessage = useCallback((message: string) => {\r\n    if (socket?.readyState === WebSocket.OPEN) {\r\n      const messageData = {\r\n        message,\r\n        timestamp: Date.now(),\r\n        userId\r\n      };\r\n      socket.send(JSON.stringify(messageData));\r\n      setLastActivity(new Date());\r\n      console.log('üì§ Message sent:', message);\r\n    } else {\r\n      console.warn('‚ö†Ô∏è WebSocket not connected, attempting to reconnect...');\r\n      connect();\r\n    }\r\n  }, [socket, userId, connect]);\r\n\r\n  const reconnect = useCallback(() => {\r\n    console.log('üîÑ Manual reconnection triggered');\r\n    reconnectAttemptsRef.current = 0;\r\n    \r\n    // Close existing connection\r\n    if (socket) {\r\n      socket.close(1000, 'Manual reconnect');\r\n    }\r\n    \r\n    // Clear timeouts\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n    }\r\n    \r\n    // Reconnect\r\n    setTimeout(connect, 100);\r\n  }, [socket, connect]);\r\n\r\n  // Initialize connection\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      if (heartbeatIntervalRef.current) {\r\n        clearInterval(heartbeatIntervalRef.current);\r\n      }\r\n      if (socket) {\r\n        socket.close(1000, 'Component unmount');\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Handle page visibility changes\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'visible' && !isConnected) {\r\n        console.log('üëÅÔ∏è Page became visible, checking connection...');\r\n        reconnect();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, [isConnected, reconnect]);\r\n\r\n  // Handle online/offline events\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      console.log('üåê Network back online, reconnecting...');\r\n      reconnect();\r\n    };\r\n\r\n    const handleOffline = () => {\r\n      console.log('üìµ Network offline');\r\n      setConnectionStatus('disconnected');\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, [reconnect]);\r\n\r\n  return {\r\n    socket,\r\n    isConnected,\r\n    connectionStatus,\r\n    sendMessage,\r\n    messages,\r\n    reconnect,\r\n    lastActivity\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}