{"ast":null,"code":"import _objectSpread from\"C:/Users/piyus/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import React, { useState, useEffect } from 'react';\n// interface FlightSearchProps {\n//   socket: WebSocket | null;\n//   sendMessage: (message: string) => void;\n//   isConnected: boolean;\n// }\n// interface FlightResult {\n//   airline: string;\n//   price: string;\n//   time: string;\n//   duration: string;\n//   flightNumber: string;\n//   route: string;\n//   bookingUrl?: string;\n//   stops?: number;\n//   aircraft?: string;\n//   source: string;\n//   scraped: boolean;\n// }\n// const FlightSearch: React.FC<FlightSearchProps> = ({ socket, sendMessage, isConnected }) => {\n//   const [origin, setOrigin] = useState('');\n//   const [destination, setDestination] = useState('');\n//   const [date, setDate] = useState('');\n//   const [passengers, setPassengers] = useState('1');\n//   const [travelClass, setTravelClass] = useState('economy');\n//   const [searching, setSearching] = useState(false);\n//   const [results, setResults] = useState<FlightResult[]>([]);\n//   const [searchId, setSearchId] = useState('');\n//   const [aiAnalysis, setAiAnalysis] = useState('');\n//   // Listen for WebSocket messages\n//   useEffect(() => {\n//     if (socket) {\n//       const handleMessage = (event: MessageEvent) => {\n//         try {\n//           const data = JSON.parse(event.data);\n//           if (data.type === 'message' && data.agent_used === 'flight_agent') {\n//             setSearching(false);\n//             // Parse flight results from AI response\n//             if (data.flight_results && data.flight_results.length > 0) {\n//               const enhancedResults = data.flight_results.map((flight: any, index: number) => ({\n//                 ...flight,\n//                 bookingUrl: generateBookingUrl(flight, origin, destination, date),\n//                 flightNumber: flight.flight_number || `${flight.airline.substring(0, 2).toUpperCase()}-${Math.floor(Math.random() * 900) + 100}`\n//               }));\n//               setResults(enhancedResults);\n//             }\n//             // Set AI analysis\n//             if (data.ai_analysis) {\n//               setAiAnalysis(data.ai_analysis);\n//             }\n//             // Handle screenshot if available\n//             if (data.screenshot_path) {\n//               console.log('Screenshot available:', data.screenshot_path);\n//             }\n//           }\n//         } catch (error) {\n//           console.error('Error parsing WebSocket message:', error);\n//         }\n//       };\n//       socket.addEventListener('message', handleMessage);\n//       return () => socket.removeEventListener('message', handleMessage);\n//     }\n//   }, [socket, origin, destination, date]);\n//   const generateBookingUrl = (flight: any, origin: string, destination: string, date: string) => {\n//     const airline = flight.airline.toLowerCase();\n//     // Generate booking URLs based on airline\n//     if (airline.includes('indigo')) {\n//       return `https://www.goindigo.in/booking/flight-select?origin=${origin}&destination=${destination}&departure=${date}&passengers=${passengers}&class=${travelClass}`;\n//     } else if (airline.includes('air india')) {\n//       return `https://www.airindia.in/booking?from=${origin}&to=${destination}&date=${date}&pax=${passengers}&class=${travelClass}`;\n//     } else if (airline.includes('spicejet')) {\n//       return `https://www.spicejet.com/flight-booking?origin=${origin}&destination=${destination}&departure=${date}&passengers=${passengers}`;\n//     } else if (airline.includes('vistara')) {\n//       return `https://www.airvistara.com/booking/flight-search?origin=${origin}&destination=${destination}&date=${date}&passengers=${passengers}`;\n//     } else {\n//       // Generic booking URL for other airlines\n//       return `https://www.makemytrip.com/flight/search?itinerary=${origin}-${destination}-${date}&tripType=O&paxType=A-${passengers}_C-0_I-0&intl=false&class=${travelClass.toUpperCase()}`;\n//     }\n//   };\n//   const handleSearch = async () => {\n//     if (!origin || !destination) {\n//       alert('Please enter both origin and destination');\n//       return;\n//     }\n//     if (!isConnected) {\n//       alert('AI assistant is not connected. Please wait for connection.');\n//       return;\n//     }\n//     setSearching(true);\n//     setResults([]);\n//     setAiAnalysis('');\n//     const currentSearchId = Date.now().toString();\n//     setSearchId(currentSearchId);\n//     // Format date for AI\n//     const searchDate = date || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n//     // Send comprehensive search request to AI\n//     const searchQuery = `Search flights from ${origin} to ${destination} on ${searchDate} for ${passengers} passenger(s) in ${travelClass} class. Please provide real-time flight options with prices, timings, and booking recommendations.`;\n//     sendMessage(searchQuery);\n//     // Fallback timeout in case AI doesn't respond\n//     setTimeout(() => {\n//       if (searching) {\n//         setSearching(false);\n//         // Provide fallback data if AI doesn't respond\n//         const fallbackResults: FlightResult[] = [\n//           {\n//             airline: 'IndiGo',\n//             price: '₹8,500',\n//             time: '08:30 AM',\n//             duration: '2h 15m',\n//             flightNumber: '6E-234',\n//             route: `${origin} → ${destination}`,\n//             stops: 0,\n//             aircraft: 'A320',\n//             source: 'Fallback Data',\n//             scraped: false,\n//             bookingUrl: generateBookingUrl({ airline: 'IndiGo' }, origin, destination, searchDate)\n//           },\n//           {\n//             airline: 'Air India',\n//             price: '₹12,200',\n//             time: '02:15 PM',\n//             duration: '2h 30m',\n//             flightNumber: 'AI-131',\n//             route: `${origin} → ${destination}`,\n//             stops: 0,\n//             aircraft: 'A321',\n//             source: 'Fallback Data',\n//             scraped: false,\n//             bookingUrl: generateBookingUrl({ airline: 'Air India' }, origin, destination, searchDate)\n//           },\n//           {\n//             airline: 'SpiceJet',\n//             price: '₹7,800',\n//             time: '06:45 PM',\n//             duration: '2h 20m',\n//             flightNumber: 'SG-8194',\n//             route: `${origin} → ${destination}`,\n//             stops: 0,\n//             aircraft: 'B737',\n//             source: 'Fallback Data',\n//             scraped: false,\n//             bookingUrl: generateBookingUrl({ airline: 'SpiceJet' }, origin, destination, searchDate)\n//           }\n//         ];\n//         setResults(fallbackResults);\n//         setAiAnalysis('Using cached flight data. For real-time prices and availability, please click \"Book Now\" on your preferred flight.');\n//       }\n//     }, 10000); // 10 second timeout\n//   };\n//   const handleBookFlight = (flight: FlightResult) => {\n//     if (flight.bookingUrl) {\n//       // Open booking URL in new tab\n//       window.open(flight.bookingUrl, '_blank', 'noopener,noreferrer');\n//       // Send booking analytics to AI\n//       if (isConnected) {\n//         sendMessage(`User selected ${flight.airline} flight ${flight.flightNumber} for ${flight.price} from ${origin} to ${destination}`);\n//       }\n//     } else {\n//       alert('Booking URL not available for this flight. Please visit the airline website directly.');\n//     }\n//   };\n//   const getFlightStatusColor = (flight: FlightResult) => {\n//     if (flight.scraped) {\n//       return '#10b981'; // Green for live data\n//     } else {\n//       return '#f59e0b'; // Orange for fallback data\n//     }\n//   };\n//   return (\n//     <div className=\"flight-search\">\n//       <div className=\"page-header\">\n//         <h1>Flight Search</h1>\n//         <p>Real-time flight search with intelligent recommendations</p>\n//         {isConnected && (\n//           <div className=\"ai-status\">\n//             <span className=\"status-dot connected\"></span>\n//             AI Assistant Connected\n//           </div>\n//         )}\n//       </div>\n//       {/* Search Form */}\n//       <div className=\"search-form\">\n//         <div className=\"form-grid\">\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">From</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-input\"\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\n//               value={origin}\n//               onChange={(e) => setOrigin(e.target.value)}\n//               list=\"airports-from\"\n//             />\n//             <datalist id=\"airports-from\">\n//               <option value=\"Delhi\">Delhi (DEL)</option>\n//               <option value=\"Mumbai\">Mumbai (BOM)</option>\n//               <option value=\"Bangalore\">Bangalore (BLR)</option>\n//               <option value=\"Chennai\">Chennai (MAA)</option>\n//               <option value=\"Kolkata\">Kolkata (CCU)</option>\n//               <option value=\"Hyderabad\">Hyderabad (HYD)</option>\n//               <option value=\"Pune\">Pune (PNQ)</option>\n//             </datalist>\n//           </div>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">To</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-input\"\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\n//               value={destination}\n//               onChange={(e) => setDestination(e.target.value)}\n//               list=\"airports-to\"\n//             />\n//             <datalist id=\"airports-to\">\n//               <option value=\"Delhi\">Delhi (DEL)</option>\n//               <option value=\"Mumbai\">Mumbai (BOM)</option>\n//               <option value=\"Bangalore\">Bangalore (BLR)</option>\n//               <option value=\"Chennai\">Chennai (MAA)</option>\n//               <option value=\"Kolkata\">Kolkata (CCU)</option>\n//               <option value=\"Hyderabad\">Hyderabad (HYD)</option>\n//               <option value=\"Pune\">Pune (PNQ)</option>\n//             </datalist>\n//           </div>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Departure Date</label>\n//             <input\n//               type=\"date\"\n//               className=\"form-input\"\n//               value={date}\n//               onChange={(e) => setDate(e.target.value)}\n//               min={new Date().toISOString().split('T')[0]}\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Passengers</label>\n//             <select\n//               className=\"form-input\"\n//               value={passengers}\n//               onChange={(e) => setPassengers(e.target.value)}\n//             >\n//               {[1,2,3,4,5,6,7,8,9].map(num => (\n//                 <option key={num} value={num}>{num} {num === 1 ? 'Passenger' : 'Passengers'}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group\">\n//             <label className=\"form-label\">Class</label>\n//             <select\n//               className=\"form-input\"\n//               value={travelClass}\n//               onChange={(e) => setTravelClass(e.target.value)}\n//             >\n//               <option value=\"economy\">Economy</option>\n//               <option value=\"premium-economy\">Premium Economy</option>\n//               <option value=\"business\">Business</option>\n//               <option value=\"first\">First Class</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div className=\"search-actions\">\n//           <button\n//             className=\"btn btn-primary search-btn\"\n//             onClick={handleSearch}\n//             disabled={searching || !isConnected}\n//           >\n//             {searching ? (\n//               <>\n//                 <div className=\"spinner-small\"></div>\n//                 Searching...\n//               </>\n//             ) : (\n//               'Search Flights'\n//             )}\n//           </button>\n//           {!isConnected && (\n//             <p className=\"connection-warning\">\n//               ⚠️ AI assistant disconnected. Reconnecting...\n//             </p>\n//           )}\n//         </div>\n//       </div>\n//       {/* AI Analysis */}\n//       {aiAnalysis && (\n//         <div className=\"ai-analysis\">\n//           <h3>🤖 AI Travel Insights</h3>\n//           <p>{aiAnalysis}</p>\n//         </div>\n//       )}\n//       {/* Flight Results */}\n//       {results.length > 0 && (\n//         <div className=\"flight-results\">\n//           <div className=\"results-header\">\n//             <h2>Flight Options</h2>\n//             <p>{results.length} flights found for {origin} → {destination}</p>\n//           </div>\n//           <div className=\"flights-grid\">\n//             {results.map((flight, index) => (\n//               <div key={index} className=\"flight-card\">\n//                 <div className=\"flight-header\">\n//                   <div className=\"airline-info\">\n//                     <h3>{flight.airline}</h3>\n//                     <span className=\"flight-number\">{flight.flightNumber}</span>\n//                   </div>\n//                   <div\n//                     className=\"data-source\"\n//                     style={{ color: getFlightStatusColor(flight) }}\n//                   >\n//                     {flight.scraped ? '🟢 Live Data' : '🟡 Cached Data'}\n//                   </div>\n//                 </div>\n//                 <div className=\"flight-details\">\n//                   <div className=\"time-info\">\n//                     <div className=\"departure\">\n//                       <span className=\"time\">{flight.time}</span>\n//                       <span className=\"airport\">{origin}</span>\n//                     </div>\n//                     <div className=\"duration\">\n//                       <span className=\"duration-text\">{flight.duration}</span>\n//                       <div className=\"flight-line\">\n//                         <div className=\"line\"></div>\n//                         <div className=\"plane\">✈️</div>\n//                       </div>\n//                       {flight.stops !== undefined && (\n//                         <span className=\"stops\">\n//                           {flight.stops === 0 ? 'Non-stop' : `${flight.stops} stop${flight.stops > 1 ? 's' : ''}`}\n//                         </span>\n//                       )}\n//                     </div>\n//                     <div className=\"arrival\">\n//                       <span className=\"time\">\n//                         {/* Calculate arrival time */}\n//                         {(() => {\n//                           const [hours, minutes] = flight.time.split(/[:\\s]/);\n//                           const [durationHours, durationMinutes] = flight.duration.match(/\\d+/g) || ['2', '0'];\n//                           const departureTime = new Date();\n//                           departureTime.setHours(parseInt(hours) + (flight.time.includes('PM') && hours !== '12' ? 12 : 0));\n//                           departureTime.setMinutes(parseInt(minutes));\n//                           departureTime.setHours(departureTime.getHours() + parseInt(durationHours));\n//                           departureTime.setMinutes(departureTime.getMinutes() + parseInt(durationMinutes));\n//                           return departureTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\n//                         })()}\n//                       </span>\n//                       <span className=\"airport\">{destination}</span>\n//                     </div>\n//                   </div>\n//                   {flight.aircraft && (\n//                     <div className=\"aircraft-info\">\n//                       <span>Aircraft: {flight.aircraft}</span>\n//                     </div>\n//                   )}\n//                 </div>\n//                 <div className=\"flight-footer\">\n//                   <div className=\"price-section\">\n//                     <span className=\"price\">{flight.price}</span>\n//                     <span className=\"price-note\">per person</span>\n//                   </div>\n//                   <button\n//                     className=\"btn btn-success book-btn\"\n//                     onClick={() => handleBookFlight(flight)}\n//                   >\n//                     📅 Book Now\n//                   </button>\n//                 </div>\n//                 <div className=\"source-info\">\n//                   <small>Source: {flight.source}</small>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n//       {searching && (\n//         <div className=\"searching-indicator\">\n//           <div className=\"spinner\"></div>\n//           <h3>Searching for the best flights...</h3>\n//           <p>Analyzing real-time prices and availability</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default FlightSearch;\n// import React, { useState } from 'react';\n// // import { flightService, FlightResult, FlightSearchParams } from '../services/FlightService';\n// import flightService, { FlightSearchRequest, FlightResult } from '../services/FlightService';\n// interface FlightSearchProps {\n//   socket: WebSocket | null;\n//   sendMessage: (message: string) => void;\n//   isConnected: boolean;\n// }\n// const FlightSearch: React.FC<FlightSearchProps> = ({ socket, sendMessage, isConnected }) => {\n//   const [searchParams, setSearchParams] = useState<FlightSearchParams>({\n//     origin: '',\n//     destination: '',\n//     departureDate: '',\n//     passengers: 1,\n//     class: 'economy'\n//   });\n//   const [flights, setFlights] = useState<FlightResult[]>([]);\n//   const [searching, setSearching] = useState(false);\n//   const [searchFailed, setSearchFailed] = useState(false);\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const handleInputChange = (field: keyof FlightSearchParams, value: string | number) => {\n//     setSearchParams(prev => ({\n//       ...prev,\n//       [field]: value\n//     }));\n//   };\n//   const handleSearch = async () => {\n//     if (!searchParams.origin || !searchParams.destination) {\n//       alert('Please enter both origin and destination');\n//       return;\n//     }\n//     setSearching(true);\n//     setSearchFailed(false);\n//     setErrorMessage('');\n//     setFlights([]);\n//     try {\n//       // Send AI message for logging\n//       if (isConnected) {\n//         sendMessage(`Searching flights from ${searchParams.origin} to ${searchParams.destination} on ${searchParams.departureDate}`);\n//       }\n//       const results = await flightService.searchFlights(searchParams);\n//       if (results.length > 0) {\n//         setFlights(results);\n//         setSearchFailed(false);\n//       } else {\n//         setSearchFailed(true);\n//         setErrorMessage('No flights found. Our flight search services are currently unavailable.');\n//       }\n//     } catch (error) {\n//       console.error('Flight search error:', error);\n//       setSearchFailed(true);\n//       setErrorMessage('Flight search services are temporarily unavailable. Please try again later.');\n//     } finally {\n//       setSearching(false);\n//     }\n//   };\n//   const handleSelectFlight = (flight: FlightResult) => {\n//     // Log selection with AI\n//     if (isConnected) {\n//       sendMessage(`User selected ${flight.airline} flight ${flight.flightNumber} for ₹${flight.price}`);\n//     }\n//     // Open booking URL\n//     window.open(flight.bookingUrl, '_blank', 'noopener,noreferrer');\n//   };\n//   const openSkyscanner = () => {\n//     const skyscannerUrl = `https://www.skyscanner.co.in/transport/flights/${searchParams.origin}/${searchParams.destination}/${searchParams.departureDate?.replace(/-/g, '')}/?adults=${searchParams.passengers}&children=0&adultsv2=${searchParams.passengers}&childrenv2=&infants=0&cabinclass=${searchParams.class}&rtn=0`;\n//     window.open(skyscannerUrl, '_blank', 'noopener,noreferrer');\n//   };\n//   return (\n//     <div className=\"flight-search\">\n//       <div className=\"page-header\">\n//         <h1>✈️ AI Flight Search</h1>\n//         <p>Find the best flights with real-time data and AI assistance</p>\n//       </div>\n//       {/* Search Form */}\n//       <div className=\"search-form\">\n//         <div className=\"form-grid\">\n//           <div className=\"form-group\">\n//             <label>From</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\n//               value={searchParams.origin}\n//               onChange={(e) => handleInputChange('origin', e.target.value)}\n//               className=\"form-input\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label>To</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Mumbai, Chennai, Hyderabad...\"\n//               value={searchParams.destination}\n//               onChange={(e) => handleInputChange('destination', e.target.value)}\n//               className=\"form-input\"\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Departure Date</label>\n//             <input\n//               type=\"date\"\n//               value={searchParams.departureDate}\n//               onChange={(e) => handleInputChange('departureDate', e.target.value)}\n//               className=\"form-input\"\n//               min={new Date().toISOString().split('T')[0]}\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Passengers</label>\n//             <select\n//               value={searchParams.passengers}\n//               onChange={(e) => handleInputChange('passengers', parseInt(e.target.value))}\n//               className=\"form-input\"\n//             >\n//               {[1,2,3,4,5,6].map(num => (\n//                 <option key={num} value={num}>{num} {num === 1 ? 'Adult' : 'Adults'}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group\">\n//             <label>Class</label>\n//             <select\n//               value={searchParams.class}\n//               onChange={(e) => handleInputChange('class', e.target.value)}\n//               className=\"form-input\"\n//             >\n//               <option value=\"economy\">Economy</option>\n//               <option value=\"business\">Business</option>\n//               <option value=\"first\">First Class</option>\n//             </select>\n//           </div>\n//         </div>\n//         <div className=\"search-actions\">\n//           <button\n//             className=\"btn btn-primary\"\n//             onClick={handleSearch}\n//             disabled={searching || !searchParams.origin || !searchParams.destination}\n//           >\n//             {searching ? '🔍 Searching...' : '🔍 Search Flights'}\n//           </button>\n//         </div>\n//       </div>\n//       {/* Search Results */}\n//       {searching && (\n//         <div className=\"search-status\">\n//           <div className=\"spinner\"></div>\n//           <p>Searching for the best flights...</p>\n//           <small>Checking multiple sources for real-time prices</small>\n//         </div>\n//       )}\n//       {searchFailed && (\n//         <div className=\"search-failed\">\n//           <div className=\"error-message\">\n//             <h3>🚫 Flight Search Unavailable</h3>\n//             <p>{errorMessage}</p>\n//             <p>Our real-time flight search is temporarily unavailable. You can search directly on Skyscanner:</p>\n//             <button className=\"btn btn-skyscanner\" onClick={openSkyscanner}>\n//               🔗 Search on Skyscanner\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//       {flights.length > 0 && (\n//         <div className=\"flight-results\">\n//           <div className=\"results-header\">\n//             <h3>✈️ Available Flights</h3>\n//             <p>Found {flights.length} flights • Real-time prices</p>\n//           </div>\n//           <div className=\"flights-list\">\n//             {flights.map((flight, index) => (\n//               <div key={flight.id} className=\"flight-card\">\n//                 <div className=\"flight-info\">\n//                   <div className=\"airline-section\">\n//                     <h4>{flight.airline}</h4>\n//                     <span className=\"flight-number\">{flight.flightNumber}</span>\n//                     <span className={`source-badge ${flight.source}`}>\n//                       {flight.source === 'serpapi' ? 'Live Data' :\n//                        flight.source === 'scraping' ? 'Real-time' : 'Cached'}\n//                     </span>\n//                   </div>\n//                   <div className=\"time-section\">\n//                     <div className=\"time-info\">\n//                       <span className=\"time\">{flight.departureTime}</span>\n//                       <span className=\"airport\">{searchParams.origin}</span>\n//                     </div>\n//                     <div className=\"flight-path\">\n//                       <span className=\"duration\">{flight.duration}</span>\n//                       <div className=\"path-line\">\n//                         {flight.stops === 0 ? (\n//                           <span className=\"direct\">Direct</span>\n//                         ) : (\n//                           <span className=\"stops\">{flight.stops} stop{flight.stops > 1 ? 's' : ''}</span>\n//                         )}\n//                       </div>\n//                     </div>\n//                     <div className=\"time-info\">\n//                       <span className=\"time\">{flight.arrivalTime}</span>\n//                       <span className=\"airport\">{searchParams.destination}</span>\n//                     </div>\n//                   </div>\n//                   <div className=\"price-section\">\n//                     <div className=\"price\">{flight.price}</div>\n//                     <button\n//                       className=\"btn btn-select\"\n//                       onClick={() => handleSelectFlight(flight)}\n//                     >\n//                       Select Flight →\n//                     </button>\n//                   </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"search-alternatives\">\n//             <p>Want more options?</p>\n//             <button className=\"btn btn-secondary\" onClick={openSkyscanner}>\n//               🔗 View more on Skyscanner\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default FlightSearch;\nimport React,{useState}from\"react\";import{flightService}from\"../services/FlightService\";// Define the FlightSearchParams interface\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FlightSearch=_ref=>{let{socket,sendMessage,isConnected}=_ref;const[searchParams,setSearchParams]=useState({origin:\"\",destination:\"\",departureDate:\"\",returnDate:\"\",passengers:1,tripType:\"one-way\"});const[searchState,setSearchState]=useState({loading:false,error:\"\",flights:[],searchPerformed:false});const popularRoutes=[{from:\"Delhi\",to:\"Mumbai\",code:\"DEL-BOM\"},{from:\"Bangalore\",to:\"Chennai\",code:\"BLR-MAA\"},{from:\"Mumbai\",to:\"Goa\",code:\"BOM-GOI\"},{from:\"Delhi\",to:\"Bangalore\",code:\"DEL-BLR\"}];const handleInputChange=(field,value)=>{setSearchParams(prev=>_objectSpread(_objectSpread({},prev),{},{[field]:value}));};const handleSearch=async()=>{if(!searchParams.origin||!searchParams.destination||!searchParams.departureDate){setSearchState(prev=>_objectSpread(_objectSpread({},prev),{},{error:\"Please fill in all required fields\"}));return;}setSearchState(prev=>_objectSpread(_objectSpread({},prev),{},{loading:true,error:\"\",searchPerformed:false}));try{const searchRequest={origin:searchParams.origin,destination:searchParams.destination,date:searchParams.departureDate,passengers:searchParams.passengers||1};const results=await flightService.searchFlights(searchRequest);console.log(\"Searching flights with params:\",searchRequest);setSearchState(prev=>_objectSpread(_objectSpread({},prev),{},{loading:false,flights:results,searchPerformed:true,error:results.length===0?\"No flights found for your search criteria\":\"\"}));// Send message via WebSocket if available\nif(sendMessage&&isConnected&&socket){sendMessage(\"Searched flights from \".concat(searchParams.origin,\" to \").concat(searchParams.destination,\" on \").concat(searchParams.departureDate,\". Found \").concat(results.length,\" options.\"));}}catch(error){console.error(\"Flight search error:\",error);setSearchState(prev=>_objectSpread(_objectSpread({},prev),{},{loading:false,error:error.message||\"Failed to search flights. Please try again.\",searchPerformed:true}));}};const handleQuickSearch=route=>{setSearchParams(prev=>_objectSpread(_objectSpread({},prev),{},{origin:route.from,destination:route.to}));};const formatPrice=price=>{if(price.includes(\"₹\"))return price;return\"\\u20B9\".concat(price);};const getTomorrowDate=()=>{const tomorrow=new Date();tomorrow.setDate(tomorrow.getDate()+1);return tomorrow.toISOString().split(\"T\")[0];};return/*#__PURE__*/_jsxs(\"div\",{className:\"flight-search-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDEEB Flight Search\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Find the best flights for your business travel\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Trip Type\"}),/*#__PURE__*/_jsxs(\"select\",{value:searchParams.tripType,onChange:e=>handleInputChange(\"tripType\",e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"one-way\",children:\"One Way\"}),/*#__PURE__*/_jsx(\"option\",{value:\"round-trip\",children:\"Round Trip\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Passengers\"}),/*#__PURE__*/_jsx(\"select\",{value:searchParams.passengers,onChange:e=>handleInputChange(\"passengers\",parseInt(e.target.value)),children:[1,2,3,4,5,6,7,8,9].map(num=>/*#__PURE__*/_jsxs(\"option\",{value:num,children:[num,\" Passenger\",num>1?\"s\":\"\"]},num))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"From *\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Origin city\",value:searchParams.origin,onChange:e=>handleInputChange(\"origin\",e.target.value),list:\"cities\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"To *\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Destination city\",value:searchParams.destination,onChange:e=>handleInputChange(\"destination\",e.target.value),list:\"cities\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Departure Date *\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:searchParams.departureDate,onChange:e=>handleInputChange(\"departureDate\",e.target.value),min:getTomorrowDate()})]}),searchParams.tripType===\"round-trip\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Return Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:searchParams.returnDate,onChange:e=>handleInputChange(\"returnDate\",e.target.value),min:searchParams.departureDate||getTomorrowDate()})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"search-button\",onClick:handleSearch,disabled:searchState.loading,children:searchState.loading?\"🔍 Searching...\":\"🔍 Search Flights\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"quick-search\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Popular Routes\"}),/*#__PURE__*/_jsx(\"div\",{className:\"route-buttons\",children:popularRoutes.map((route,index)=>/*#__PURE__*/_jsxs(\"button\",{className:\"route-button\",onClick:()=>handleQuickSearch(route),children:[route.from,\" \\u2192 \",route.to]},index))})]}),searchState.error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"\\u26A0\\uFE0F \",searchState.error]}),searchState.loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Searching for the best flights...\"})]}),searchState.searchPerformed&&searchState.flights.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"search-results\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\u2708\\uFE0F Available Flights (\",searchState.flights.length,\" found)\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"flights-list\",children:searchState.flights.map((flight,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flight-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flight-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"airline-info\",children:[/*#__PURE__*/_jsx(\"h4\",{children:flight.airline}),/*#__PURE__*/_jsxs(\"span\",{className:\"flight-source\",children:[\"via \",flight.source]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flight-price\",children:/*#__PURE__*/_jsx(\"span\",{className:\"price\",children:formatPrice(flight.price)})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flight-details\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"time-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"departure\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:flight.departure_time}),/*#__PURE__*/_jsx(\"span\",{className:\"city\",children:searchParams.origin})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"duration\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"duration-text\",children:flight.duration}),/*#__PURE__*/_jsxs(\"div\",{className:\"flight-line\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"line\"}),/*#__PURE__*/_jsx(\"div\",{className:\"plane\",children:\"\\u2708\\uFE0F\"})]}),flight.stops>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"stops\",children:[flight.stops,\" stop\",flight.stops>1?\"s\":\"\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"arrival\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"time\",children:flight.arrival_time}),/*#__PURE__*/_jsx(\"span\",{className:\"city\",children:searchParams.destination})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flight-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"book-button\",onClick:()=>window.open(flight.bookingUrl,\"_blank\"),children:\"Book Now\"}),/*#__PURE__*/_jsx(\"button\",{className:\"details-button\",onClick:()=>{if(sendMessage&&isConnected&&socket){// Added socket check\nsendMessage(\"Tell me more about the \".concat(flight.airline,\" flight for \").concat(formatPrice(flight.price)));}},children:\"More Details\"})]})]},flight.id||index))})]}),searchState.searchPerformed&&searchState.flights.length===0&&!searchState.loading&&!searchState.error&&/*#__PURE__*/_jsxs(\"div\",{className:\"no-results\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"No flights found\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Try adjusting your search criteria or check back later.\"})]}),/*#__PURE__*/_jsxs(\"datalist\",{id:\"cities\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"Delhi\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Mumbai\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Bangalore\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Chennai\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Hyderabad\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Kolkata\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Pune\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Ahmedabad\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Goa\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Kochi\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Jaipur\"})]})]});};export default FlightSearch;","map":{"version":3,"names":["React","useState","flightService","jsx","_jsx","jsxs","_jsxs","FlightSearch","_ref","socket","sendMessage","isConnected","searchParams","setSearchParams","origin","destination","departureDate","returnDate","passengers","tripType","searchState","setSearchState","loading","error","flights","searchPerformed","popularRoutes","from","to","code","handleInputChange","field","value","prev","_objectSpread","handleSearch","searchRequest","date","results","searchFlights","console","log","length","concat","message","handleQuickSearch","route","formatPrice","price","includes","getTomorrowDate","tomorrow","Date","setDate","getDate","toISOString","split","className","children","onChange","e","target","parseInt","map","num","type","placeholder","list","min","onClick","disabled","index","flight","airline","source","departure_time","duration","stops","arrival_time","window","open","bookingUrl","id"],"sources":["D:/Navikenz/pro/navihire/frontend/src/components/FlightSearch.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// interface FlightSearchProps {\r\n//   socket: WebSocket | null;\r\n//   sendMessage: (message: string) => void;\r\n//   isConnected: boolean;\r\n// }\r\n\r\n// interface FlightResult {\r\n//   airline: string;\r\n//   price: string;\r\n//   time: string;\r\n//   duration: string;\r\n//   flightNumber: string;\r\n//   route: string;\r\n//   bookingUrl?: string;\r\n//   stops?: number;\r\n//   aircraft?: string;\r\n//   source: string;\r\n//   scraped: boolean;\r\n// }\r\n\r\n// const FlightSearch: React.FC<FlightSearchProps> = ({ socket, sendMessage, isConnected }) => {\r\n//   const [origin, setOrigin] = useState('');\r\n//   const [destination, setDestination] = useState('');\r\n//   const [date, setDate] = useState('');\r\n//   const [passengers, setPassengers] = useState('1');\r\n//   const [travelClass, setTravelClass] = useState('economy');\r\n//   const [searching, setSearching] = useState(false);\r\n//   const [results, setResults] = useState<FlightResult[]>([]);\r\n//   const [searchId, setSearchId] = useState('');\r\n//   const [aiAnalysis, setAiAnalysis] = useState('');\r\n\r\n//   // Listen for WebSocket messages\r\n//   useEffect(() => {\r\n//     if (socket) {\r\n//       const handleMessage = (event: MessageEvent) => {\r\n//         try {\r\n//           const data = JSON.parse(event.data);\r\n\r\n//           if (data.type === 'message' && data.agent_used === 'flight_agent') {\r\n//             setSearching(false);\r\n\r\n//             // Parse flight results from AI response\r\n//             if (data.flight_results && data.flight_results.length > 0) {\r\n//               const enhancedResults = data.flight_results.map((flight: any, index: number) => ({\r\n//                 ...flight,\r\n//                 bookingUrl: generateBookingUrl(flight, origin, destination, date),\r\n//                 flightNumber: flight.flight_number || `${flight.airline.substring(0, 2).toUpperCase()}-${Math.floor(Math.random() * 900) + 100}`\r\n//               }));\r\n//               setResults(enhancedResults);\r\n//             }\r\n\r\n//             // Set AI analysis\r\n//             if (data.ai_analysis) {\r\n//               setAiAnalysis(data.ai_analysis);\r\n//             }\r\n\r\n//             // Handle screenshot if available\r\n//             if (data.screenshot_path) {\r\n//               console.log('Screenshot available:', data.screenshot_path);\r\n//             }\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error parsing WebSocket message:', error);\r\n//         }\r\n//       };\r\n\r\n//       socket.addEventListener('message', handleMessage);\r\n//       return () => socket.removeEventListener('message', handleMessage);\r\n//     }\r\n//   }, [socket, origin, destination, date]);\r\n\r\n//   const generateBookingUrl = (flight: any, origin: string, destination: string, date: string) => {\r\n//     const airline = flight.airline.toLowerCase();\r\n\r\n//     // Generate booking URLs based on airline\r\n//     if (airline.includes('indigo')) {\r\n//       return `https://www.goindigo.in/booking/flight-select?origin=${origin}&destination=${destination}&departure=${date}&passengers=${passengers}&class=${travelClass}`;\r\n//     } else if (airline.includes('air india')) {\r\n//       return `https://www.airindia.in/booking?from=${origin}&to=${destination}&date=${date}&pax=${passengers}&class=${travelClass}`;\r\n//     } else if (airline.includes('spicejet')) {\r\n//       return `https://www.spicejet.com/flight-booking?origin=${origin}&destination=${destination}&departure=${date}&passengers=${passengers}`;\r\n//     } else if (airline.includes('vistara')) {\r\n//       return `https://www.airvistara.com/booking/flight-search?origin=${origin}&destination=${destination}&date=${date}&passengers=${passengers}`;\r\n//     } else {\r\n//       // Generic booking URL for other airlines\r\n//       return `https://www.makemytrip.com/flight/search?itinerary=${origin}-${destination}-${date}&tripType=O&paxType=A-${passengers}_C-0_I-0&intl=false&class=${travelClass.toUpperCase()}`;\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = async () => {\r\n//     if (!origin || !destination) {\r\n//       alert('Please enter both origin and destination');\r\n//       return;\r\n//     }\r\n\r\n//     if (!isConnected) {\r\n//       alert('AI assistant is not connected. Please wait for connection.');\r\n//       return;\r\n//     }\r\n\r\n//     setSearching(true);\r\n//     setResults([]);\r\n//     setAiAnalysis('');\r\n\r\n//     const currentSearchId = Date.now().toString();\r\n//     setSearchId(currentSearchId);\r\n\r\n//     // Format date for AI\r\n//     const searchDate = date || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\r\n\r\n//     // Send comprehensive search request to AI\r\n//     const searchQuery = `Search flights from ${origin} to ${destination} on ${searchDate} for ${passengers} passenger(s) in ${travelClass} class. Please provide real-time flight options with prices, timings, and booking recommendations.`;\r\n\r\n//     sendMessage(searchQuery);\r\n\r\n//     // Fallback timeout in case AI doesn't respond\r\n//     setTimeout(() => {\r\n//       if (searching) {\r\n//         setSearching(false);\r\n//         // Provide fallback data if AI doesn't respond\r\n//         const fallbackResults: FlightResult[] = [\r\n//           {\r\n//             airline: 'IndiGo',\r\n//             price: '₹8,500',\r\n//             time: '08:30 AM',\r\n//             duration: '2h 15m',\r\n//             flightNumber: '6E-234',\r\n//             route: `${origin} → ${destination}`,\r\n//             stops: 0,\r\n//             aircraft: 'A320',\r\n//             source: 'Fallback Data',\r\n//             scraped: false,\r\n//             bookingUrl: generateBookingUrl({ airline: 'IndiGo' }, origin, destination, searchDate)\r\n//           },\r\n//           {\r\n//             airline: 'Air India',\r\n//             price: '₹12,200',\r\n//             time: '02:15 PM',\r\n//             duration: '2h 30m',\r\n//             flightNumber: 'AI-131',\r\n//             route: `${origin} → ${destination}`,\r\n//             stops: 0,\r\n//             aircraft: 'A321',\r\n//             source: 'Fallback Data',\r\n//             scraped: false,\r\n//             bookingUrl: generateBookingUrl({ airline: 'Air India' }, origin, destination, searchDate)\r\n//           },\r\n//           {\r\n//             airline: 'SpiceJet',\r\n//             price: '₹7,800',\r\n//             time: '06:45 PM',\r\n//             duration: '2h 20m',\r\n//             flightNumber: 'SG-8194',\r\n//             route: `${origin} → ${destination}`,\r\n//             stops: 0,\r\n//             aircraft: 'B737',\r\n//             source: 'Fallback Data',\r\n//             scraped: false,\r\n//             bookingUrl: generateBookingUrl({ airline: 'SpiceJet' }, origin, destination, searchDate)\r\n//           }\r\n//         ];\r\n//         setResults(fallbackResults);\r\n//         setAiAnalysis('Using cached flight data. For real-time prices and availability, please click \"Book Now\" on your preferred flight.');\r\n//       }\r\n//     }, 10000); // 10 second timeout\r\n//   };\r\n\r\n//   const handleBookFlight = (flight: FlightResult) => {\r\n//     if (flight.bookingUrl) {\r\n//       // Open booking URL in new tab\r\n//       window.open(flight.bookingUrl, '_blank', 'noopener,noreferrer');\r\n\r\n//       // Send booking analytics to AI\r\n//       if (isConnected) {\r\n//         sendMessage(`User selected ${flight.airline} flight ${flight.flightNumber} for ${flight.price} from ${origin} to ${destination}`);\r\n//       }\r\n//     } else {\r\n//       alert('Booking URL not available for this flight. Please visit the airline website directly.');\r\n//     }\r\n//   };\r\n\r\n//   const getFlightStatusColor = (flight: FlightResult) => {\r\n//     if (flight.scraped) {\r\n//       return '#10b981'; // Green for live data\r\n//     } else {\r\n//       return '#f59e0b'; // Orange for fallback data\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flight-search\">\r\n//       <div className=\"page-header\">\r\n//         <h1>Flight Search</h1>\r\n//         <p>Real-time flight search with intelligent recommendations</p>\r\n//         {isConnected && (\r\n//           <div className=\"ai-status\">\r\n//             <span className=\"status-dot connected\"></span>\r\n//             AI Assistant Connected\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Search Form */}\r\n//       <div className=\"search-form\">\r\n//         <div className=\"form-grid\">\r\n//           <div className=\"form-group\">\r\n//             <label className=\"form-label\">From</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-input\"\r\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\r\n//               value={origin}\r\n//               onChange={(e) => setOrigin(e.target.value)}\r\n//               list=\"airports-from\"\r\n//             />\r\n//             <datalist id=\"airports-from\">\r\n//               <option value=\"Delhi\">Delhi (DEL)</option>\r\n//               <option value=\"Mumbai\">Mumbai (BOM)</option>\r\n//               <option value=\"Bangalore\">Bangalore (BLR)</option>\r\n//               <option value=\"Chennai\">Chennai (MAA)</option>\r\n//               <option value=\"Kolkata\">Kolkata (CCU)</option>\r\n//               <option value=\"Hyderabad\">Hyderabad (HYD)</option>\r\n//               <option value=\"Pune\">Pune (PNQ)</option>\r\n//             </datalist>\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label className=\"form-label\">To</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-input\"\r\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\r\n//               value={destination}\r\n//               onChange={(e) => setDestination(e.target.value)}\r\n//               list=\"airports-to\"\r\n//             />\r\n//             <datalist id=\"airports-to\">\r\n//               <option value=\"Delhi\">Delhi (DEL)</option>\r\n//               <option value=\"Mumbai\">Mumbai (BOM)</option>\r\n//               <option value=\"Bangalore\">Bangalore (BLR)</option>\r\n//               <option value=\"Chennai\">Chennai (MAA)</option>\r\n//               <option value=\"Kolkata\">Kolkata (CCU)</option>\r\n//               <option value=\"Hyderabad\">Hyderabad (HYD)</option>\r\n//               <option value=\"Pune\">Pune (PNQ)</option>\r\n//             </datalist>\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label className=\"form-label\">Departure Date</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               className=\"form-input\"\r\n//               value={date}\r\n//               onChange={(e) => setDate(e.target.value)}\r\n//               min={new Date().toISOString().split('T')[0]}\r\n//             />\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label className=\"form-label\">Passengers</label>\r\n//             <select\r\n//               className=\"form-input\"\r\n//               value={passengers}\r\n//               onChange={(e) => setPassengers(e.target.value)}\r\n//             >\r\n//               {[1,2,3,4,5,6,7,8,9].map(num => (\r\n//                 <option key={num} value={num}>{num} {num === 1 ? 'Passenger' : 'Passengers'}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label className=\"form-label\">Class</label>\r\n//             <select\r\n//               className=\"form-input\"\r\n//               value={travelClass}\r\n//               onChange={(e) => setTravelClass(e.target.value)}\r\n//             >\r\n//               <option value=\"economy\">Economy</option>\r\n//               <option value=\"premium-economy\">Premium Economy</option>\r\n//               <option value=\"business\">Business</option>\r\n//               <option value=\"first\">First Class</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"search-actions\">\r\n//           <button\r\n//             className=\"btn btn-primary search-btn\"\r\n//             onClick={handleSearch}\r\n//             disabled={searching || !isConnected}\r\n//           >\r\n//             {searching ? (\r\n//               <>\r\n//                 <div className=\"spinner-small\"></div>\r\n//                 Searching...\r\n//               </>\r\n//             ) : (\r\n//               'Search Flights'\r\n//             )}\r\n//           </button>\r\n\r\n//           {!isConnected && (\r\n//             <p className=\"connection-warning\">\r\n//               ⚠️ AI assistant disconnected. Reconnecting...\r\n//             </p>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* AI Analysis */}\r\n//       {aiAnalysis && (\r\n//         <div className=\"ai-analysis\">\r\n//           <h3>🤖 AI Travel Insights</h3>\r\n//           <p>{aiAnalysis}</p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Flight Results */}\r\n//       {results.length > 0 && (\r\n//         <div className=\"flight-results\">\r\n//           <div className=\"results-header\">\r\n//             <h2>Flight Options</h2>\r\n//             <p>{results.length} flights found for {origin} → {destination}</p>\r\n//           </div>\r\n\r\n//           <div className=\"flights-grid\">\r\n//             {results.map((flight, index) => (\r\n//               <div key={index} className=\"flight-card\">\r\n//                 <div className=\"flight-header\">\r\n//                   <div className=\"airline-info\">\r\n//                     <h3>{flight.airline}</h3>\r\n//                     <span className=\"flight-number\">{flight.flightNumber}</span>\r\n//                   </div>\r\n//                   <div\r\n//                     className=\"data-source\"\r\n//                     style={{ color: getFlightStatusColor(flight) }}\r\n//                   >\r\n//                     {flight.scraped ? '🟢 Live Data' : '🟡 Cached Data'}\r\n//                   </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"flight-details\">\r\n//                   <div className=\"time-info\">\r\n//                     <div className=\"departure\">\r\n//                       <span className=\"time\">{flight.time}</span>\r\n//                       <span className=\"airport\">{origin}</span>\r\n//                     </div>\r\n//                     <div className=\"duration\">\r\n//                       <span className=\"duration-text\">{flight.duration}</span>\r\n//                       <div className=\"flight-line\">\r\n//                         <div className=\"line\"></div>\r\n//                         <div className=\"plane\">✈️</div>\r\n//                       </div>\r\n//                       {flight.stops !== undefined && (\r\n//                         <span className=\"stops\">\r\n//                           {flight.stops === 0 ? 'Non-stop' : `${flight.stops} stop${flight.stops > 1 ? 's' : ''}`}\r\n//                         </span>\r\n//                       )}\r\n//                     </div>\r\n//                     <div className=\"arrival\">\r\n//                       <span className=\"time\">\r\n//                         {/* Calculate arrival time */}\r\n//                         {(() => {\r\n//                           const [hours, minutes] = flight.time.split(/[:\\s]/);\r\n//                           const [durationHours, durationMinutes] = flight.duration.match(/\\d+/g) || ['2', '0'];\r\n//                           const departureTime = new Date();\r\n//                           departureTime.setHours(parseInt(hours) + (flight.time.includes('PM') && hours !== '12' ? 12 : 0));\r\n//                           departureTime.setMinutes(parseInt(minutes));\r\n//                           departureTime.setHours(departureTime.getHours() + parseInt(durationHours));\r\n//                           departureTime.setMinutes(departureTime.getMinutes() + parseInt(durationMinutes));\r\n//                           return departureTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\r\n//                         })()}\r\n//                       </span>\r\n//                       <span className=\"airport\">{destination}</span>\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   {flight.aircraft && (\r\n//                     <div className=\"aircraft-info\">\r\n//                       <span>Aircraft: {flight.aircraft}</span>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n\r\n//                 <div className=\"flight-footer\">\r\n//                   <div className=\"price-section\">\r\n//                     <span className=\"price\">{flight.price}</span>\r\n//                     <span className=\"price-note\">per person</span>\r\n//                   </div>\r\n\r\n//                   <button\r\n//                     className=\"btn btn-success book-btn\"\r\n//                     onClick={() => handleBookFlight(flight)}\r\n//                   >\r\n//                     📅 Book Now\r\n//                   </button>\r\n//                 </div>\r\n\r\n//                 <div className=\"source-info\">\r\n//                   <small>Source: {flight.source}</small>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {searching && (\r\n//         <div className=\"searching-indicator\">\r\n//           <div className=\"spinner\"></div>\r\n//           <h3>Searching for the best flights...</h3>\r\n//           <p>Analyzing real-time prices and availability</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FlightSearch;\r\n\r\n// import React, { useState } from 'react';\r\n// // import { flightService, FlightResult, FlightSearchParams } from '../services/FlightService';\r\n// import flightService, { FlightSearchRequest, FlightResult } from '../services/FlightService';\r\n\r\n// interface FlightSearchProps {\r\n//   socket: WebSocket | null;\r\n//   sendMessage: (message: string) => void;\r\n//   isConnected: boolean;\r\n// }\r\n\r\n// const FlightSearch: React.FC<FlightSearchProps> = ({ socket, sendMessage, isConnected }) => {\r\n//   const [searchParams, setSearchParams] = useState<FlightSearchParams>({\r\n//     origin: '',\r\n//     destination: '',\r\n//     departureDate: '',\r\n//     passengers: 1,\r\n//     class: 'economy'\r\n//   });\r\n\r\n//   const [flights, setFlights] = useState<FlightResult[]>([]);\r\n//   const [searching, setSearching] = useState(false);\r\n//   const [searchFailed, setSearchFailed] = useState(false);\r\n//   const [errorMessage, setErrorMessage] = useState('');\r\n\r\n//   const handleInputChange = (field: keyof FlightSearchParams, value: string | number) => {\r\n//     setSearchParams(prev => ({\r\n//       ...prev,\r\n//       [field]: value\r\n//     }));\r\n//   };\r\n\r\n//   const handleSearch = async () => {\r\n//     if (!searchParams.origin || !searchParams.destination) {\r\n//       alert('Please enter both origin and destination');\r\n//       return;\r\n//     }\r\n\r\n//     setSearching(true);\r\n//     setSearchFailed(false);\r\n//     setErrorMessage('');\r\n//     setFlights([]);\r\n\r\n//     try {\r\n//       // Send AI message for logging\r\n//       if (isConnected) {\r\n//         sendMessage(`Searching flights from ${searchParams.origin} to ${searchParams.destination} on ${searchParams.departureDate}`);\r\n//       }\r\n\r\n//       const results = await flightService.searchFlights(searchParams);\r\n\r\n//       if (results.length > 0) {\r\n//         setFlights(results);\r\n//         setSearchFailed(false);\r\n//       } else {\r\n//         setSearchFailed(true);\r\n//         setErrorMessage('No flights found. Our flight search services are currently unavailable.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Flight search error:', error);\r\n//       setSearchFailed(true);\r\n//       setErrorMessage('Flight search services are temporarily unavailable. Please try again later.');\r\n//     } finally {\r\n//       setSearching(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSelectFlight = (flight: FlightResult) => {\r\n//     // Log selection with AI\r\n//     if (isConnected) {\r\n//       sendMessage(`User selected ${flight.airline} flight ${flight.flightNumber} for ₹${flight.price}`);\r\n//     }\r\n\r\n//     // Open booking URL\r\n//     window.open(flight.bookingUrl, '_blank', 'noopener,noreferrer');\r\n//   };\r\n\r\n//   const openSkyscanner = () => {\r\n//     const skyscannerUrl = `https://www.skyscanner.co.in/transport/flights/${searchParams.origin}/${searchParams.destination}/${searchParams.departureDate?.replace(/-/g, '')}/?adults=${searchParams.passengers}&children=0&adultsv2=${searchParams.passengers}&childrenv2=&infants=0&cabinclass=${searchParams.class}&rtn=0`;\r\n//     window.open(skyscannerUrl, '_blank', 'noopener,noreferrer');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flight-search\">\r\n//       <div className=\"page-header\">\r\n//         <h1>✈️ AI Flight Search</h1>\r\n//         <p>Find the best flights with real-time data and AI assistance</p>\r\n//       </div>\r\n\r\n//       {/* Search Form */}\r\n//       <div className=\"search-form\">\r\n//         <div className=\"form-grid\">\r\n//           <div className=\"form-group\">\r\n//             <label>From</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Delhi, Mumbai, Bangalore...\"\r\n//               value={searchParams.origin}\r\n//               onChange={(e) => handleInputChange('origin', e.target.value)}\r\n//               className=\"form-input\"\r\n//             />\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label>To</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Mumbai, Chennai, Hyderabad...\"\r\n//               value={searchParams.destination}\r\n//               onChange={(e) => handleInputChange('destination', e.target.value)}\r\n//               className=\"form-input\"\r\n//             />\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label>Departure Date</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={searchParams.departureDate}\r\n//               onChange={(e) => handleInputChange('departureDate', e.target.value)}\r\n//               className=\"form-input\"\r\n//               min={new Date().toISOString().split('T')[0]}\r\n//             />\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label>Passengers</label>\r\n//             <select\r\n//               value={searchParams.passengers}\r\n//               onChange={(e) => handleInputChange('passengers', parseInt(e.target.value))}\r\n//               className=\"form-input\"\r\n//             >\r\n//               {[1,2,3,4,5,6].map(num => (\r\n//                 <option key={num} value={num}>{num} {num === 1 ? 'Adult' : 'Adults'}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//             <label>Class</label>\r\n//             <select\r\n//               value={searchParams.class}\r\n//               onChange={(e) => handleInputChange('class', e.target.value)}\r\n//               className=\"form-input\"\r\n//             >\r\n//               <option value=\"economy\">Economy</option>\r\n//               <option value=\"business\">Business</option>\r\n//               <option value=\"first\">First Class</option>\r\n//             </select>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"search-actions\">\r\n//           <button\r\n//             className=\"btn btn-primary\"\r\n//             onClick={handleSearch}\r\n//             disabled={searching || !searchParams.origin || !searchParams.destination}\r\n//           >\r\n//             {searching ? '🔍 Searching...' : '🔍 Search Flights'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Search Results */}\r\n//       {searching && (\r\n//         <div className=\"search-status\">\r\n//           <div className=\"spinner\"></div>\r\n//           <p>Searching for the best flights...</p>\r\n//           <small>Checking multiple sources for real-time prices</small>\r\n//         </div>\r\n//       )}\r\n\r\n//       {searchFailed && (\r\n//         <div className=\"search-failed\">\r\n//           <div className=\"error-message\">\r\n//             <h3>🚫 Flight Search Unavailable</h3>\r\n//             <p>{errorMessage}</p>\r\n//             <p>Our real-time flight search is temporarily unavailable. You can search directly on Skyscanner:</p>\r\n\r\n//             <button className=\"btn btn-skyscanner\" onClick={openSkyscanner}>\r\n//               🔗 Search on Skyscanner\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {flights.length > 0 && (\r\n//         <div className=\"flight-results\">\r\n//           <div className=\"results-header\">\r\n//             <h3>✈️ Available Flights</h3>\r\n//             <p>Found {flights.length} flights • Real-time prices</p>\r\n//           </div>\r\n\r\n//           <div className=\"flights-list\">\r\n//             {flights.map((flight, index) => (\r\n//               <div key={flight.id} className=\"flight-card\">\r\n//                 <div className=\"flight-info\">\r\n//                   <div className=\"airline-section\">\r\n//                     <h4>{flight.airline}</h4>\r\n//                     <span className=\"flight-number\">{flight.flightNumber}</span>\r\n//                     <span className={`source-badge ${flight.source}`}>\r\n//                       {flight.source === 'serpapi' ? 'Live Data' :\r\n//                        flight.source === 'scraping' ? 'Real-time' : 'Cached'}\r\n//                     </span>\r\n//                   </div>\r\n\r\n//                   <div className=\"time-section\">\r\n//                     <div className=\"time-info\">\r\n//                       <span className=\"time\">{flight.departureTime}</span>\r\n//                       <span className=\"airport\">{searchParams.origin}</span>\r\n//                     </div>\r\n//                     <div className=\"flight-path\">\r\n//                       <span className=\"duration\">{flight.duration}</span>\r\n//                       <div className=\"path-line\">\r\n//                         {flight.stops === 0 ? (\r\n//                           <span className=\"direct\">Direct</span>\r\n//                         ) : (\r\n//                           <span className=\"stops\">{flight.stops} stop{flight.stops > 1 ? 's' : ''}</span>\r\n//                         )}\r\n//                       </div>\r\n//                     </div>\r\n//                     <div className=\"time-info\">\r\n//                       <span className=\"time\">{flight.arrivalTime}</span>\r\n//                       <span className=\"airport\">{searchParams.destination}</span>\r\n//                     </div>\r\n//                   </div>\r\n\r\n//                   <div className=\"price-section\">\r\n//                     <div className=\"price\">{flight.price}</div>\r\n//                     <button\r\n//                       className=\"btn btn-select\"\r\n//                       onClick={() => handleSelectFlight(flight)}\r\n//                     >\r\n//                       Select Flight →\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"search-alternatives\">\r\n//             <p>Want more options?</p>\r\n//             <button className=\"btn btn-secondary\" onClick={openSkyscanner}>\r\n//               🔗 View more on Skyscanner\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FlightSearch;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  flightService,\r\n  FlightSearchRequest,\r\n  FlightResult,\r\n} from \"../services/FlightService\";\r\n\r\ninterface FlightSearchProps {\r\n  socket?: WebSocket | null;\r\n  sendMessage?: (message: string) => void;\r\n  isConnected?: boolean;\r\n}\r\n\r\n// Define the FlightSearchParams interface\r\ninterface FlightSearchParams {\r\n  origin: string;\r\n  destination: string;\r\n  departureDate: string;\r\n  returnDate?: string;\r\n  passengers?: number;\r\n  tripType?: \"one-way\" | \"round-trip\";\r\n}\r\n\r\ninterface FlightSearchState {\r\n  loading: boolean;\r\n  error: string;\r\n  flights: FlightResult[];\r\n  searchPerformed: boolean;\r\n}\r\n\r\nconst FlightSearch: React.FC<FlightSearchProps> = ({\r\n  socket,\r\n  sendMessage,\r\n  isConnected,\r\n}) => {\r\n  const [searchParams, setSearchParams] = useState<FlightSearchParams>({\r\n    origin: \"\",\r\n    destination: \"\",\r\n    departureDate: \"\",\r\n    returnDate: \"\",\r\n    passengers: 1,\r\n    tripType: \"one-way\",\r\n  });\r\n\r\n  const [searchState, setSearchState] = useState<FlightSearchState>({\r\n    loading: false,\r\n    error: \"\",\r\n    flights: [],\r\n    searchPerformed: false,\r\n  });\r\n\r\n  const popularRoutes = [\r\n    { from: \"Delhi\", to: \"Mumbai\", code: \"DEL-BOM\" },\r\n    { from: \"Bangalore\", to: \"Chennai\", code: \"BLR-MAA\" },\r\n    { from: \"Mumbai\", to: \"Goa\", code: \"BOM-GOI\" },\r\n    { from: \"Delhi\", to: \"Bangalore\", code: \"DEL-BLR\" },\r\n  ];\r\n\r\n  const handleInputChange = (\r\n    field: keyof FlightSearchParams,\r\n    value: string | number\r\n  ) => {\r\n    setSearchParams((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (\r\n      !searchParams.origin ||\r\n      !searchParams.destination ||\r\n      !searchParams.departureDate\r\n    ) {\r\n      setSearchState((prev) => ({\r\n        ...prev,\r\n        error: \"Please fill in all required fields\",\r\n      }));\r\n      return;\r\n    }\r\n\r\n    setSearchState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      error: \"\",\r\n      searchPerformed: false,\r\n    }));\r\n\r\n    try {\r\n\r\n      const searchRequest: FlightSearchRequest = {\r\n        origin: searchParams.origin,\r\n        destination: searchParams.destination,\r\n        date: searchParams.departureDate,\r\n        passengers: searchParams.passengers || 1,\r\n      };\r\n\r\n      const results = await flightService.searchFlights(searchRequest);\r\n\r\n      console.log(\"Searching flights with params:\", searchRequest);\r\n\r\n      setSearchState((prev) => ({\r\n        ...prev,\r\n        loading: false,\r\n        flights: results,\r\n        searchPerformed: true,\r\n        error:\r\n          results.length === 0\r\n            ? \"No flights found for your search criteria\"\r\n            : \"\",\r\n      }));\r\n\r\n      // Send message via WebSocket if available\r\n      if (sendMessage && isConnected && socket) {\r\n        sendMessage(\r\n          `Searched flights from ${searchParams.origin} to ${searchParams.destination} on ${searchParams.departureDate}. Found ${results.length} options.`\r\n        );\r\n      }\r\n    } catch (error: any) {\r\n      console.error(\"Flight search error:\", error);\r\n      setSearchState((prev) => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error.message || \"Failed to search flights. Please try again.\",\r\n        searchPerformed: true,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleQuickSearch = (route: (typeof popularRoutes)[0]) => {\r\n    setSearchParams((prev) => ({\r\n      ...prev,\r\n      origin: route.from,\r\n      destination: route.to,\r\n    }));\r\n  };\r\n\r\n  const formatPrice = (price: string) => {\r\n    if (price.includes(\"₹\")) return price;\r\n    return `₹${price}`;\r\n  };\r\n\r\n  const getTomorrowDate = () => {\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    return tomorrow.toISOString().split(\"T\")[0];\r\n  };\r\n\r\n  return (\r\n    <div className=\"flight-search-container\">\r\n      <div className=\"search-header\">\r\n        <h2>🛫 Flight Search</h2>\r\n        <p>Find the best flights for your business travel</p>\r\n      </div>\r\n\r\n      {/* Search Form */}\r\n      <div className=\"search-form\">\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group\">\r\n            <label>Trip Type</label>\r\n            <select\r\n              value={searchParams.tripType}\r\n              onChange={(e) =>\r\n                handleInputChange(\r\n                  \"tripType\",\r\n                  e.target.value as \"one-way\" | \"round-trip\"\r\n                )\r\n              }\r\n            >\r\n              <option value=\"one-way\">One Way</option>\r\n              <option value=\"round-trip\">Round Trip</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Passengers</label>\r\n            <select\r\n              value={searchParams.passengers}\r\n              onChange={(e) =>\r\n                handleInputChange(\"passengers\", parseInt(e.target.value))\r\n              }\r\n            >\r\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (\r\n                <option key={num} value={num}>\r\n                  {num} Passenger{num > 1 ? \"s\" : \"\"}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group\">\r\n            <label>From *</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Origin city\"\r\n              value={searchParams.origin}\r\n              onChange={(e) => handleInputChange(\"origin\", e.target.value)}\r\n              list=\"cities\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>To *</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Destination city\"\r\n              value={searchParams.destination}\r\n              onChange={(e) => handleInputChange(\"destination\", e.target.value)}\r\n              list=\"cities\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group\">\r\n            <label>Departure Date *</label>\r\n            <input\r\n              type=\"date\"\r\n              value={searchParams.departureDate}\r\n              onChange={(e) =>\r\n                handleInputChange(\"departureDate\", e.target.value)\r\n              }\r\n              min={getTomorrowDate()}\r\n            />\r\n          </div>\r\n          {searchParams.tripType === \"round-trip\" && (\r\n            <div className=\"form-group\">\r\n              <label>Return Date</label>\r\n              <input\r\n                type=\"date\"\r\n                value={searchParams.returnDate}\r\n                onChange={(e) =>\r\n                  handleInputChange(\"returnDate\", e.target.value)\r\n                }\r\n                min={searchParams.departureDate || getTomorrowDate()}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <button\r\n          className=\"search-button\"\r\n          onClick={handleSearch}\r\n          disabled={searchState.loading}\r\n        >\r\n          {searchState.loading ? \"🔍 Searching...\" : \"🔍 Search Flights\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Quick Search Options */}\r\n      <div className=\"quick-search\">\r\n        <h3>Popular Routes</h3>\r\n        <div className=\"route-buttons\">\r\n          {popularRoutes.map((route, index) => (\r\n            <button\r\n              key={index}\r\n              className=\"route-button\"\r\n              onClick={() => handleQuickSearch(route)}\r\n            >\r\n              {route.from} → {route.to}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {searchState.error && (\r\n        <div className=\"error-message\">⚠️ {searchState.error}</div>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {searchState.loading && (\r\n        <div className=\"loading-state\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>Searching for the best flights...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Search Results */}\r\n      {searchState.searchPerformed && searchState.flights.length > 0 && (\r\n        <div className=\"search-results\">\r\n          <h3>✈️ Available Flights ({searchState.flights.length} found)</h3>\r\n          <div className=\"flights-list\">\r\n            {searchState.flights.map((flight, index) => (\r\n              <div key={flight.id || index} className=\"flight-card\">\r\n                <div className=\"flight-header\">\r\n                  <div className=\"airline-info\">\r\n                    <h4>{flight.airline}</h4>\r\n                    <span className=\"flight-source\">via {flight.source}</span>\r\n                  </div>\r\n                  <div className=\"flight-price\">\r\n                    <span className=\"price\">{formatPrice(flight.price)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flight-details\">\r\n                  <div className=\"time-info\">\r\n                    <div className=\"departure\">\r\n                      <span className=\"time\">{flight.departure_time}</span>\r\n                      <span className=\"city\">{searchParams.origin}</span>\r\n                    </div>\r\n                    <div className=\"duration\">\r\n                      <span className=\"duration-text\">{flight.duration}</span>\r\n                      <div className=\"flight-line\">\r\n                        <div className=\"line\"></div>\r\n                        <div className=\"plane\">✈️</div>\r\n                      </div>\r\n                      {flight.stops > 0 && (\r\n                        <span className=\"stops\">\r\n                          {flight.stops} stop{flight.stops > 1 ? \"s\" : \"\"}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"arrival\">\r\n                      <span className=\"time\">{flight.arrival_time}</span>\r\n                      <span className=\"city\">{searchParams.destination}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flight-actions\">\r\n                  <button\r\n                    className=\"book-button\"\r\n                    onClick={() => window.open(flight.bookingUrl, \"_blank\")}\r\n                  >\r\n                    Book Now\r\n                  </button>\r\n                  <button\r\n                    className=\"details-button\"\r\n                    onClick={() => {\r\n                      if (sendMessage && isConnected && socket) {\r\n                        // Added socket check\r\n                        sendMessage(\r\n                          `Tell me more about the ${\r\n                            flight.airline\r\n                          } flight for ${formatPrice(flight.price)}`\r\n                        );\r\n                      }\r\n                    }}\r\n                  >\r\n                    More Details\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* No Results */}\r\n      {searchState.searchPerformed &&\r\n        searchState.flights.length === 0 &&\r\n        !searchState.loading &&\r\n        !searchState.error && (\r\n          <div className=\"no-results\">\r\n            <h3>No flights found</h3>\r\n            <p>Try adjusting your search criteria or check back later.</p>\r\n          </div>\r\n        )}\r\n\r\n      {/* City suggestions datalist */}\r\n      <datalist id=\"cities\">\r\n        <option value=\"Delhi\" />\r\n        <option value=\"Mumbai\" />\r\n        <option value=\"Bangalore\" />\r\n        <option value=\"Chennai\" />\r\n        <option value=\"Hyderabad\" />\r\n        <option value=\"Kolkata\" />\r\n        <option value=\"Pune\" />\r\n        <option value=\"Ahmedabad\" />\r\n        <option value=\"Goa\" />\r\n        <option value=\"Kochi\" />\r\n        <option value=\"Jaipur\" />\r\n      </datalist>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlightSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}